<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>「ElasticSearch」ES内存分布及index加载方式</title>
    <link href="/2023/07/27/%E3%80%8CElasticSearch%E3%80%8DES%E5%86%85%E5%AD%98%E5%88%86%E5%B8%83%E5%8F%8Aindex%E5%8A%A0%E8%BD%BD%E6%96%B9%E5%BC%8F/"/>
    <url>/2023/07/27/%E3%80%8CElasticSearch%E3%80%8DES%E5%86%85%E5%AD%98%E5%88%86%E5%B8%83%E5%8F%8Aindex%E5%8A%A0%E8%BD%BD%E6%96%B9%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<h4 id="1-index内部存储"><a href="#1-index内部存储" class="headerlink" title="1. index内部存储"></a>1. index内部存储</h4><p>ES中一个index由多个shard组成，而一个shard又由多个segment组成，一个segment是一部分document数据，segment中会包含文档、域和词，即一个index按层次结构来看为：索引(index) -&gt; 分片(shard) -&gt; 段(segment) -&gt; 文档(document) -&gt; 域(Field) -&gt; 词(Term)<br><img src="/2023/07/27/%E3%80%8CElasticSearch%E3%80%8DES%E5%86%85%E5%AD%98%E5%88%86%E5%B8%83%E5%8F%8Aindex%E5%8A%A0%E8%BD%BD%E6%96%B9%E5%BC%8F/YEYjeBD632Kfku1uxoP6EqxOmtFnP1t0DaY6hgyAsRI.jpg"><br>段(segment):<br>数据加载的单元，里面包含倒排索引等数据。当ES 收到数据时，会先将数据放入内存中(index buffer), 当到达指定的时间(index.refresh_interval配置的时间)后写入到segment, 该时间段一次生成一个segment，此时segment存在filesystem cache中，当到达指定的时间(index.translog.sync_interval配置)或指定大小(index.translog.flush_threshold_size配置)后刷新到磁盘。segment在后台自动merge成更大的segment<br><img src="/2023/07/27/%E3%80%8CElasticSearch%E3%80%8DES%E5%86%85%E5%AD%98%E5%88%86%E5%B8%83%E5%8F%8Aindex%E5%8A%A0%E8%BD%BD%E6%96%B9%E5%BC%8F/pFgm9c6JWO_6U9HAO7rdfSI1lkycJjt2H_77zCxtuHg.png"></p><h4 id="2-ES内存分布"><a href="#2-ES内存分布" class="headerlink" title="2. ES内存分布"></a>2. ES内存分布</h4><p>ES的内存分为堆内内存和堆外内存，其中堆内内存主要是写入缓冲、cache等相关内存，受JVM的GC管理，该部分内存会出现OOM。堆外内存主要是lucene在使用，使用了操作系统的page cache，其大小影响查询性能，堆外内存受操作系统管理，如果操作系统内存不足会释放page cache内存，不会出现OOM问题。<br>细分来看，堆内内存主要有五部分组成：公共内存、fielddata缓存、query缓存、request缓存和segment相关的一些内存。堆外内存主要有两部分：加载segment相关的内存和查询相关的内存。<br><img src="/2023/07/27/%E3%80%8CElasticSearch%E3%80%8DES%E5%86%85%E5%AD%98%E5%88%86%E5%B8%83%E5%8F%8Aindex%E5%8A%A0%E8%BD%BD%E6%96%B9%E5%BC%8F/79GlWWj0abyzBfUfD7HrvBKvWels5841DTRRYMjXjMw.jpg"></p><h5 id=""><a href="#" class="headerlink" title=""></a></h5><p>common 内存<br>(1) index buffer<br>索引写入缓冲区，用于存储新写入的文档，当其被填满时，缓冲区中的文档被写入磁盘中的 segments 中。节点上所有 shard 共享。这部分空间是可以通过GC被反复利用的。默认大小为堆内存的10%。</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs stylus">indices<span class="hljs-selector-class">.memory</span><span class="hljs-selector-class">.index_buffer_size</span>: <span class="hljs-number">10%</span><br><span class="hljs-comment">//写入segment的缓冲区大小，到达这个大小会刷盘</span><br>indexing_pressure<span class="hljs-selector-class">.memory</span><span class="hljs-selector-class">.limit</span>: <span class="hljs-number">10%</span><br><span class="hljs-comment">//在处理中的document的大小，大于这个大小会限流，客户端返回429错误</span><br></code></pre></td></tr></table></figure><p>(2) 线程池缓存及队列内存<br>ES使用各种内部有很多线程池，这部分线程池会占用部分内存，分析大约有几百兆<br><img src="/2023/07/27/%E3%80%8CElasticSearch%E3%80%8DES%E5%86%85%E5%AD%98%E5%88%86%E5%B8%83%E5%8F%8Aindex%E5%8A%A0%E8%BD%BD%E6%96%B9%E5%BC%8F/J2N-ig41aHAJj9_M59O1KJZNxvQqQUeqjR3-Bb7WTv0.png"><br>(3) PageCacheRecycler内存<br>page cache内存回收管理器，通过PageCacheRecycler这个类来管理page cache，内部将内存以页为单位管理和回收，缓存一页大小是16KB，这部分内存记录一些页缓存的信息<br><img src="/2023/07/27/%E3%80%8CElasticSearch%E3%80%8DES%E5%86%85%E5%AD%98%E5%88%86%E5%B8%83%E5%8F%8Aindex%E5%8A%A0%E8%BD%BD%E6%96%B9%E5%BC%8F/xrKYVZ8Wj4X_FfrgsDVMZv-vrBCbrMzKpVnDh_W1SuQ.png"><br>(4) metadata内存<br>ES的metadata主要包括indexc的mapping、shard信息，这部分内存不大，但是当shard非常多的时候也会变得比较大，metadata在每个节点上都存在一份数据，当有index创建、关闭或删除的时候，metadata都会由master节点更新然后推送到各个节点，所以当shard过多的时候，这个更新推送的过程就会变慢，从而影响es的性能。另外metadata会间隔一段时间持久化一次数据，数据写到磁盘上去，当节点重启后会从磁盘恢复metadata.</p><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs axapta">总结：<span class="hljs-keyword">common</span>内存=<span class="hljs-keyword">index</span> buffer + indexing_pressure.memory + 线程池缓存及队列内存 + PageCacheRecycler内存 + metadata内存 + 其它的一些运行内存<br></code></pre></td></tr></table></figure><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs stylus">indices<span class="hljs-selector-class">.breaker</span><span class="hljs-selector-class">.total</span><span class="hljs-selector-class">.limit</span>: <span class="hljs-number">70%</span><br><span class="hljs-comment">// 父熔断，inflight、request(agg)和fielddata不会使用超过堆内存的 70%  超过这个值报400 Data too large</span><br>network<span class="hljs-selector-class">.breaker</span><span class="hljs-selector-class">.inflight_requests</span><span class="hljs-selector-class">.limit</span>: <span class="hljs-number">100%</span><br><span class="hljs-comment">// 限制请求内容的长度</span><br></code></pre></td></tr></table></figure><h5 id="fielddata-cache"><a href="#fielddata-cache" class="headerlink" title="fielddata cache"></a>fielddata cache</h5><p>这部分内存分为两部分，一部分为fielddata字段的内存，另一部分为全局序数的内存。<br>fielddata字段：在ES写人数据时，当遇到keyword类型的字段时，ES会把字段值插入倒排索引和doc_values中，当做聚合的时候会使用doc_values对值做聚合，但是当遇到text字段的到时候，由于text字段一遍较大，所以ES不会将数据写入doc_values, 这个时候text类型的字段就不知道排序聚合了，为了解决这个问题，ES提供fielddata功能，单独维护一份text类型的数据，这部分数据时加载到内存中的使用fielddata cache，当第一次查询时生成。<br>全局序数：全局序数是跨多个segment的全局字段映射表。ES会在写入数据时对字段生成一个自增的数字，将这个数字个字段存入全局序数中，聚合时用全局序数聚合即可。全局序数存储在fielddata cache中，默认当一次查询时生成，也可在构建数据时候生产。</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs stylus">indices<span class="hljs-selector-class">.fielddata</span><span class="hljs-selector-class">.cache</span><span class="hljs-selector-class">.size</span>: 默认无上限<br><span class="hljs-comment">//默认内存没有上限，故内存不会被会回收</span><br>indices<span class="hljs-selector-class">.breaker</span><span class="hljs-selector-class">.fielddata</span><span class="hljs-selector-class">.limit</span>: <span class="hljs-number">60%</span> <br><span class="hljs-comment">//当fielddata cache到达堆内存的60%，熔断请求</span><br></code></pre></td></tr></table></figure><p>查询和清理该部分使用量</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk">GET <span class="hljs-regexp">/_cat/</span>nodes?v&amp;h=name,fm<br>POST <span class="hljs-regexp">/&lt;index&gt;/</span>_cache/clear?fielddata<br></code></pre></td></tr></table></figure><p><img src="/2023/07/27/%E3%80%8CElasticSearch%E3%80%8DES%E5%86%85%E5%AD%98%E5%88%86%E5%B8%83%E5%8F%8Aindex%E5%8A%A0%E8%BD%BD%E6%96%B9%E5%BC%8F/jBjgh-RECfIDsFj4AdYuXm0lUoo1UP6_J0dJGxAtWyQ.png"></p><h5 id="query-cache"><a href="#query-cache" class="headerlink" title="query cache"></a>query cache</h5><p>node级别的filter过滤器结果缓存，每个节点有一个，被所有 shard 共享，filter query查询结果要么是 yes 要么是no，不涉及 scores 的计算。使用LRU淘汰策略，内存无法被GC。默认情况下查询会开启缓存</p><figure class="highlight mathematica"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mathematica">对于<span class="hljs-variable">TermQuery</span>、<span class="hljs-variable">MatchAllDocsQuery</span>等这种查询都不被缓存。当<span class="hljs-variable">BooleanQuey</span>的字节点为空时不会被缓存，当<span class="hljs-variable">Dis</span> <span class="hljs-built_in">Max</span> <span class="hljs-built_in">Query</span>的<span class="hljs-variable">Disjuncts</span>为空时不会被缓存。<br>对于历史查询次数有要求，对于消耗高昂的<span class="hljs-built_in">Query</span>只需要<span class="hljs-number">2</span>次就加入缓存，其他的默认是<span class="hljs-number">5</span>次，对于<span class="hljs-variable">BooleanQuery</span>和<span class="hljs-variable">DisjunctionMaxQuery</span>次数为<span class="hljs-number">4</span>次。<br></code></pre></td></tr></table></figure><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs stylus">indices<span class="hljs-selector-class">.queries</span><span class="hljs-selector-class">.cache</span><span class="hljs-selector-class">.size</span>: <span class="hljs-number">10%</span> <br><span class="hljs-comment">// 默认为堆内存的10%，当cache满了，又新查询进入后，会冲刷掉老的查询缓存</span><br>index<span class="hljs-selector-class">.queries</span><span class="hljs-selector-class">.cache</span><span class="hljs-selector-class">.enable</span>: true<br><span class="hljs-comment">// 默认开启，可关闭</span><br></code></pre></td></tr></table></figure><p>查询和清理该部分使用量</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk">GET <span class="hljs-regexp">/_cat/</span>nodes?v&amp;h=name,qcm<br>POST <span class="hljs-regexp">/&lt;index&gt;/</span>_cache/clear?query<br></code></pre></td></tr></table></figure><p><img src="/2023/07/27/%E3%80%8CElasticSearch%E3%80%8DES%E5%86%85%E5%AD%98%E5%88%86%E5%B8%83%E5%8F%8Aindex%E5%8A%A0%E8%BD%BD%E6%96%B9%E5%BC%8F/B5PpJcVxaxm_yoS0aqxhEZks7WS9f2EXbBmGr_ME3c0.png"></p><h5 id="request-cache"><a href="#request-cache" class="headerlink" title="request cache"></a>request cache</h5><p>shard级别的query result缓存, 每个shard一个，默认情况下该缓存只缓存request的结果size为0的查询。所以该缓存不会缓存hits，但却会缓存 hits.total, aggregations 和 suggestions。该缓存默认是关闭的，需要手动开启.</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs stylus">indices<span class="hljs-selector-class">.requests</span><span class="hljs-selector-class">.cache</span><span class="hljs-selector-class">.size</span>: <span class="hljs-number">1%</span><br>index<span class="hljs-selector-class">.requests</span><span class="hljs-selector-class">.cache</span><span class="hljs-selector-class">.enable</span>: false<br><span class="hljs-comment">//通过url传参方式request_cache=true</span><br>indices<span class="hljs-selector-class">.breaker</span><span class="hljs-selector-class">.request</span><span class="hljs-selector-class">.limit</span>: <span class="hljs-number">40%</span><br></code></pre></td></tr></table></figure><p>查询和清理该部分使用量</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk">GET <span class="hljs-regexp">/_cat/</span>nodes?v&amp;h=name,rcm<br>POST <span class="hljs-regexp">/&lt;index&gt;/</span>_cache/clear?request<br></code></pre></td></tr></table></figure><p><img src="/2023/07/27/%E3%80%8CElasticSearch%E3%80%8DES%E5%86%85%E5%AD%98%E5%88%86%E5%B8%83%E5%8F%8Aindex%E5%8A%A0%E8%BD%BD%E6%96%B9%E5%BC%8F/iqs0yGsCfYw-_cmJuy09pamWUwuXhFUZkxB_n3QBTx4.png"></p><h5 id="Segment-Memory"><a href="#Segment-Memory" class="headerlink" title="Segment Memory"></a>Segment Memory</h5><p>缓存段信息，包括FST,Dimensional points for numeric range filters，Deleted documents bitset ，Doc values and stored fields codec formats等数据。这部分缓存是必须的，不能进行大小设置，通常跟index息息相关，close index、force merge均会释放segmentsMemory空间。其中FST是倒排索引的前缀树，这部分内存占用非常大，故在ES 7.3中默认将其移动到堆外内存，<a href="https://www.elastic.co/cn/blog/significantly-decrease-your-elasticsearch-heap-memory-usage">显著降低 Elasticsearch 堆内存使用量 | Elastic Blog</a>. 该部分内存没有参数限制，不可手动释放<br>查询该部分使用量</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-built_in">GET</span> /_cat/nodes?v&amp;<span class="hljs-attribute">h</span>=name,segmentsMemory<br></code></pre></td></tr></table></figure><p><img src="/2023/07/27/%E3%80%8CElasticSearch%E3%80%8DES%E5%86%85%E5%AD%98%E5%88%86%E5%B8%83%E5%8F%8Aindex%E5%8A%A0%E8%BD%BD%E6%96%B9%E5%BC%8F/R3kysiIydrkEmjAdafmdwkFBwBYbf-NPyGsVS0cpiuc.png"></p><h5 id="堆外内存"><a href="#堆外内存" class="headerlink" title="堆外内存"></a>堆外内存</h5><p>ES的堆外内存均为lucene使用，机器内存除了ES的堆内存外的内存空间都可被lucene，这部分内存不会OOM, 当其它程序需要使用内存时，操作系统会直接释放这部分内存，ES中使用PageCacheRecycler类来管理，这部分内存主要为lucene的FST、doc_values, 和查询时候加载的segment等数据，查询时ES会把segment加载到page cache中类进行查询，当page cache能完全加载查询的segment时，查询会快很多</p><h4 id="3-index加载方式"><a href="#3-index加载方式" class="headerlink" title="3. index加载方式"></a>3. index加载方式</h4><p>index的加载方式通过index.store.type参数控制，可选的方式有下面几种</p><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs avrasm"><span class="hljs-symbol">fs:</span> 默认文件系统实现<br><span class="hljs-symbol">simplefs:</span> 使用随机访问文件的文件系统存储, 面向WINDOWS平台的文件系统<br><span class="hljs-symbol">niofs:</span> 使用NIO在文件系统上存储索引, 面向LINUX平台的NIO库的文件系统<br><span class="hljs-symbol">mmapfs:</span> 文件映射到内存（MMap）来将索引存储在文件系统上, 面向LINUX平台的支持MMap方式的文件系统<br><span class="hljs-symbol">hybridfs:</span> 根据文件类型选择niofs 或者 mmapfs,  默认的加载模式<br></code></pre></td></tr></table></figure><p>当indexService创建shard的会同时创建一个shard对应的FSDirectory, 其中有两个参数，一个是store相关的setting，另一个就是index的存储路径</p><figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs autohotkey">public synchronized IndexShard createShard(<br>    final ShardRouting routing,<br>    final Consumer&lt;ShardId&gt; globalCheckpointSyncer,<br>    final RetentionLeaseSyncer retentionLeaseSyncer<br>) throws IOException &#123;<br>    Objects.requireNonNull(retentionLeaseSyncer)<span class="hljs-comment">;</span><br>        //省略代码<br>        Directory directory = directoryFactory.newDirectory(this.indexSettings, path)<span class="hljs-comment">;</span><br>        store = <span class="hljs-keyword">new</span> Store(<br><span class="hljs-built_in">            shardId,</span><br>            this.indexSettings,<br><span class="hljs-built_in">            directory,</span><br><span class="hljs-built_in">            lock,</span><br>            <span class="hljs-keyword">new</span> StoreCloseListener(shardId, () -&gt; eventListener.onStoreClosed(shardId))<br>        )<span class="hljs-comment">;</span><br>        eventListener.onStoreCreated(shardId)<span class="hljs-comment">;</span><br>        indexShard = <span class="hljs-keyword">new</span> IndexShard(<br><span class="hljs-built_in">            routing,</span><br>            this.indexSettings,<br><span class="hljs-built_in">            path,</span><br><span class="hljs-built_in">            store,</span><br><span class="hljs-built_in">            indexSortSupplier,</span><br><span class="hljs-built_in">            indexCache,</span><br><span class="hljs-built_in">            mapperService,</span><br><span class="hljs-built_in">            similarityService,</span><br><span class="hljs-built_in">            engineFactory,</span><br><span class="hljs-built_in">            eventListener,</span><br><span class="hljs-built_in">            readerWrapper,</span><br><span class="hljs-built_in">            threadPool,</span><br><span class="hljs-built_in">            bigArrays,</span><br><span class="hljs-built_in">            engineWarmer,</span><br><span class="hljs-built_in">            searchOperationListeners,</span><br><span class="hljs-built_in">            indexingOperationListeners,</span><br>            () -&gt; globalCheckpointSyncer.accept(shardId),<br><span class="hljs-built_in">            retentionLeaseSyncer,</span><br><span class="hljs-built_in">            circuitBreakerService,</span><br>            snapshotCommitSupplier<br>        )<span class="hljs-comment">;</span><br>        //省略代码<br>&#125;<br></code></pre></td></tr></table></figure><p>其中setting相关的参数有</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs stylus">index<span class="hljs-selector-class">.store</span><span class="hljs-selector-class">.fs</span><span class="hljs-selector-class">.fs_lock</span>: \<span class="hljs-selector-attr">[native, simple\]</span> 默认 native<br><span class="hljs-comment">//native: 文件存在时忽略异常</span><br><span class="hljs-comment">//simple: 文件存在时抛异常</span><br>index<span class="hljs-selector-class">.store</span><span class="hljs-selector-class">.type</span>: 存储类型 默认 hybridfs<br>node<span class="hljs-selector-class">.store</span><span class="hljs-selector-class">.allow_mmap</span>: bool值 默认true<br><span class="hljs-comment">//如果存储类型是hybridfs 或 mmapfs时，是否允许使用内存映射</span><br>index<span class="hljs-selector-class">.store</span><span class="hljs-selector-class">.preload</span>: <span class="hljs-selector-attr">[]</span><br><span class="hljs-comment">//预加载segment文件，值为文件类型后缀名</span><br></code></pre></td></tr></table></figure><p><img src="/2023/07/27/%E3%80%8CElasticSearch%E3%80%8DES%E5%86%85%E5%AD%98%E5%88%86%E5%B8%83%E5%8F%8Aindex%E5%8A%A0%E8%BD%BD%E6%96%B9%E5%BC%8F/9QLexvqiUMDHJcwRT_0HiGrKJpLGE6tftQDIWSHFb_g.png"><br>当创建FSDirectory时会根据index.store.type和node.store.allow_mmap来选择不同的加载类型，当index.store.type为fs时，会使用IndexModule.defaultStoreType返回获取加载类型，否则就使用index.store.type配置的类型，主要就三种类型HYBRIDFS、MMAPFS和NIOFS</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">protected Directory <span class="hljs-keyword">new</span><span class="hljs-constructor">FSDirectory(Path <span class="hljs-params">location</span>, LockFactory <span class="hljs-params">lockFactory</span>, IndexSettings <span class="hljs-params">indexSettings</span>)</span> throws IOException &#123;<br>    final String storeType = indexSettings.get<span class="hljs-constructor">Settings()</span><br>        .get(<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">IndexModule</span>.</span><span class="hljs-module"><span class="hljs-identifier">INDEX_STORE_TYPE_SETTING</span>.</span></span>get<span class="hljs-constructor">Key()</span>, <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">IndexModule</span>.</span><span class="hljs-module"><span class="hljs-identifier">Type</span>.</span><span class="hljs-module"><span class="hljs-identifier">FS</span>.</span></span>get<span class="hljs-constructor">SettingsKey()</span>);<br>    IndexModule.Type <span class="hljs-keyword">type</span>;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">IndexModule</span>.</span><span class="hljs-module"><span class="hljs-identifier">Type</span>.</span><span class="hljs-module"><span class="hljs-identifier">FS</span>.</span></span><span class="hljs-keyword">match</span>(storeType)) &#123;<br>        <span class="hljs-keyword">type</span> = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">IndexModule</span>.</span></span>default<span class="hljs-constructor">StoreType(IndexModule.NODE_STORE_ALLOW_MMAP.<span class="hljs-params">get</span>(<span class="hljs-params">indexSettings</span>.<span class="hljs-params">getNodeSettings</span>()</span>));<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">type</span> = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">IndexModule</span>.</span><span class="hljs-module"><span class="hljs-identifier">Type</span>.</span></span>from<span class="hljs-constructor">SettingsKey(<span class="hljs-params">storeType</span>)</span>;<br>    &#125;<br>    Set&lt;String&gt; preLoadExtensions = <span class="hljs-keyword">new</span> HashSet&lt;&gt;(indexSettings.get<span class="hljs-constructor">Value(IndexModule.INDEX_STORE_PRE_LOAD_SETTING)</span>);<br>    switch (<span class="hljs-keyword">type</span>) &#123;<br>        case HYBRIDFS:<br>            <span class="hljs-comment">// Use Lucene defaults</span><br>            final FSDirectory primaryDirectory = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">FSDirectory</span>.</span></span><span class="hljs-keyword">open</span>(location, lockFactory);<br>            <span class="hljs-keyword">if</span> (primaryDirectory instanceof MMapDirectory) &#123;<br>                MMapDirectory mMapDirectory = (MMapDirectory) primaryDirectory;<br>                return <span class="hljs-keyword">new</span> <span class="hljs-constructor">HybridDirectory(<span class="hljs-params">lockFactory</span>, <span class="hljs-params">setPreload</span>(<span class="hljs-params">mMapDirectory</span>, <span class="hljs-params">lockFactory</span>, <span class="hljs-params">preLoadExtensions</span>)</span>);<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                return primaryDirectory;<br>            &#125;<br>        case MMAPFS:<br>            return set<span class="hljs-constructor">Preload(<span class="hljs-params">new</span> MMapDirectory(<span class="hljs-params">location</span>, <span class="hljs-params">lockFactory</span>)</span>, lockFactory, preLoadExtensions);<br>        case SIMPLEFS:<br>        case NIOFS:<br>            return <span class="hljs-keyword">new</span> <span class="hljs-constructor">NIOFSDirectory(<span class="hljs-params">location</span>, <span class="hljs-params">lockFactory</span>)</span>;<br>        default:<br>            throw <span class="hljs-keyword">new</span> <span class="hljs-constructor">AssertionError(<span class="hljs-string">&quot;unexpected built-in store type \[&quot;</span> + <span class="hljs-params">type</span> + <span class="hljs-string">&quot;\]&quot;</span>)</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>来看看当配置为fs时，会选择那种加载方式，逻辑比较简单就是根据node.store.allow_mmap和java是否是64位的来决定是HYBRIDFS还是nio</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-type">static</span> Type <span class="hljs-title">defaultStoreType</span><span class="hljs-params">(<span class="hljs-keyword">final</span> <span class="hljs-type">boolean</span> allowMmap)</span> </span>&#123;<br>  <span class="hljs-keyword">if</span> (allowMmap &amp;&amp; Constants.JRE_IS_64BIT &amp;&amp; MMapDirectory.UNMAP_SUPPORTED) &#123;<br>        <span class="hljs-keyword">return</span> Type.HYBRIDFS;<br>  &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">return</span> Type.NIOFS;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>对于常用的hybridfs类型，会调用lucene的FSDirectory.open来创建一个FSDirectory，代码如下，逻辑基本为，当java为64位并且操作系统为linux系统，并且操作系统是64位的则选择MMapDirectory，如果是window系统则选择SimpleFSDirectory，否则选择NIOFSDirectory，当open方法返回后，会去判断是否为MMapDirectory，如果是HybridDirectory，否则返回open方法返回的FSDirectory.</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-built_in">public</span> static FSDirectory <span class="hljs-keyword">open</span>(<span class="hljs-keyword">Path</span> <span class="hljs-keyword">path</span>, LockFactory lockFactory) throws IOException &#123;<br>  <span class="hljs-keyword">if</span> (Constants.JRE_IS_64BIT &amp;&amp; MMapDirectory.UNMAP_SUPPORTED) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">new</span> MMapDirectory(<span class="hljs-type">path</span>, lockFactory);<br>  &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (Constants.WINDOWS) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">new</span> SimpleFSDirectory(<span class="hljs-type">path</span>, lockFactory);<br>  &#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">new</span> NIOFSDirectory(<span class="hljs-type">path</span>, lockFactory);<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>HybridDirectory的实现如下，其继承NIOFSDirectory类，NIOFSDirectory类在lucene中实现，构造函数有两个参数，lockFactory为fs_lock，delegate为setPreload返回的MMapDirectory</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">static final <span class="hljs-keyword">class</span> HybridDirectory extends NIOFSDirectory &#123;<br>        <span class="hljs-keyword">private</span> final MMapDirectory delegate;<br>  <br>        <span class="hljs-constructor">HybridDirectory(LockFactory <span class="hljs-params">lockFactory</span>, MMapDirectory <span class="hljs-params">delegate</span>)</span> throws IOException &#123;<br>            super(delegate.get<span class="hljs-constructor">Directory()</span>, lockFactory);<br>            this.delegate = delegate;<br>        &#125;<br>  <br>        @Override<br>        public IndexInput <span class="hljs-keyword">open</span><span class="hljs-constructor">Input(String <span class="hljs-params">name</span>, IOContext <span class="hljs-params">context</span>)</span> throws IOException &#123;<br>            <span class="hljs-keyword">if</span> (use<span class="hljs-constructor">Delegate(<span class="hljs-params">name</span>, <span class="hljs-params">context</span>)</span>) &#123;<br>                <span class="hljs-comment">// we need to do these checks on the outer directory since the inner doesn&#x27;t know about pending deletes</span><br>                ensure<span class="hljs-constructor">Open()</span>;<br>                ensure<span class="hljs-constructor">CanRead(<span class="hljs-params">name</span>)</span>;<br>                <span class="hljs-comment">// we only use the mmap to open inputs. Everything else is managed by the NIOFSDirectory otherwise</span><br>                <span class="hljs-comment">// we might run into trouble with files that are pendingDelete in one directory but still</span><br>                <span class="hljs-comment">// listed in listAll() from the other. We on the other hand don&#x27;t want to list files from both dirs</span><br>                <span class="hljs-comment">// and intersect for perf reasons.</span><br>                return delegate.<span class="hljs-keyword">open</span><span class="hljs-constructor">Input(<span class="hljs-params">name</span>, <span class="hljs-params">context</span>)</span>;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                return super.<span class="hljs-keyword">open</span><span class="hljs-constructor">Input(<span class="hljs-params">name</span>, <span class="hljs-params">context</span>)</span>;<br>            &#125;<br>        &#125;<br>  <br>        @Override<br>        public void close<span class="hljs-literal">()</span> throws IOException &#123;<br>            <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">IOUtils</span>.</span></span>close(super::close, delegate);<br>        &#125;<br>  <br>        boolean use<span class="hljs-constructor">Delegate(String <span class="hljs-params">name</span>, IOContext <span class="hljs-params">ioContext</span>)</span> &#123;<br>            <span class="hljs-keyword">if</span> (ioContext<span class="hljs-operator"> == </span>Store.READONCE_CHECKSUM) &#123;<br>                <span class="hljs-comment">// If we&#x27;re just reading the footer for the checksum then mmap() isn&#x27;t really necessary, and it&#x27;s desperately inefficient</span><br>                <span class="hljs-comment">// if pre-loading is enabled on this file.</span><br>                return <span class="hljs-literal">false</span>;<br>            &#125;<br>  <br>            final LuceneFilesExtensions extension = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">LuceneFilesExtensions</span>.</span></span>from<span class="hljs-constructor">Extension(FileSwitchDirectory.<span class="hljs-params">getExtension</span>(<span class="hljs-params">name</span>)</span>);<br>            <span class="hljs-keyword">if</span> (extension<span class="hljs-operator"> == </span>null<span class="hljs-operator"> || </span>extension.should<span class="hljs-constructor">Mmap()</span><span class="hljs-operator"> == </span><span class="hljs-literal">false</span>) &#123;<br>                <span class="hljs-comment">// Other files are either less performance-sensitive (e.g. stored field index, norms metadata)</span><br>                <span class="hljs-comment">// or are large and have a random access pattern and mmap leads to page cache trashing</span><br>                <span class="hljs-comment">// (e.g. stored fields and term vectors).</span><br>                return <span class="hljs-literal">false</span>;<br>            &#125;<br>            return <span class="hljs-literal">true</span>;<br>        &#125;<br>  <br>        MMapDirectory get<span class="hljs-constructor">Delegate()</span> &#123;<br>            return delegate;<br>        &#125;<br>    &#125;<br></code></pre></td></tr></table></figure><p>setPreload实现如下，如果设置了预加载则返回包装后的MMapDirectory，否则直接返回mMapDirectory</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">public static MMapDirectory set<span class="hljs-constructor">Preload(MMapDirectory <span class="hljs-params">mMapDirectory</span>, LockFactory <span class="hljs-params">lockFactory</span>, Set&lt;String&gt; <span class="hljs-params">preLoadExtensions</span>)</span><br>    throws IOException &#123;<br>    <span class="hljs-keyword">assert</span> mMapDirectory.get<span class="hljs-constructor">Preload()</span><span class="hljs-operator"> == </span><span class="hljs-literal">false</span>;<br>    <span class="hljs-keyword">if</span> (preLoadExtensions.is<span class="hljs-constructor">Empty()</span><span class="hljs-operator"> == </span><span class="hljs-literal">false</span>) &#123;<br>        <span class="hljs-keyword">if</span> (preLoadExtensions.contains(<span class="hljs-string">&quot;\*&quot;</span>)) &#123;<br>            mMapDirectory.set<span class="hljs-constructor">Preload(<span class="hljs-params">true</span>)</span>;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            return <span class="hljs-keyword">new</span> <span class="hljs-constructor">PreLoadMMapDirectory(<span class="hljs-params">mMapDirectory</span>, <span class="hljs-params">lockFactory</span>, <span class="hljs-params">preLoadExtensions</span>)</span>;<br>        &#125;<br>    &#125;<br>    return mMapDirectory;<br>&#125;<br></code></pre></td></tr></table></figure><p>先看看没有设置预加载的情况，在HybridDirectory中，有一个核心的方法openInput， 该方法用于加载index的文件，通过useDelegate方法判断文件是用MMapDirectory打开，还是通过父类NIOFSDirectory打开，ensureOpen判断是否能打开，ensureCanRead判断是否能读，具体open方式由lucene实现，其中是使用offheap还是onheap由lucene， es这端不做干预</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">public IndexInput <span class="hljs-keyword">open</span><span class="hljs-constructor">Input(String <span class="hljs-params">name</span>, IOContext <span class="hljs-params">context</span>)</span> throws IOException &#123;<br>            <span class="hljs-keyword">if</span> (use<span class="hljs-constructor">Delegate(<span class="hljs-params">name</span>, <span class="hljs-params">context</span>)</span>) &#123;<br>                <span class="hljs-comment">// we need to do these checks on the outer directory since the inner doesn&#x27;t know about pending deletes</span><br>                ensure<span class="hljs-constructor">Open()</span>;<br>                ensure<span class="hljs-constructor">CanRead(<span class="hljs-params">name</span>)</span>;<br>                <span class="hljs-comment">// we only use the mmap to open inputs. Everything else is managed by the NIOFSDirectory otherwise</span><br>                <span class="hljs-comment">// we might run into trouble with files that are pendingDelete in one directory but still</span><br>                <span class="hljs-comment">// listed in listAll() from the other. We on the other hand don&#x27;t want to list files from both dirs</span><br>                <span class="hljs-comment">// and intersect for perf reasons.</span><br>                return delegate.<span class="hljs-keyword">open</span><span class="hljs-constructor">Input(<span class="hljs-params">name</span>, <span class="hljs-params">context</span>)</span>;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                return super.<span class="hljs-keyword">open</span><span class="hljs-constructor">Input(<span class="hljs-params">name</span>, <span class="hljs-params">context</span>)</span>;<br>            &#125;<br>        &#125;<br></code></pre></td></tr></table></figure><p>其中useDelegate方法实现如下，逻辑为通过文件后缀名，来判断是否使用MMapDirectory读取</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs dart">boolean useDelegate(<span class="hljs-built_in">String</span> name, IOContext ioContext) &#123;<br>    <span class="hljs-keyword">if</span> (ioContext == Store.READONCE_CHECKSUM) &#123;<br>        <span class="hljs-comment">// If we&#x27;re just reading the footer for the checksum then mmap() isn&#x27;t really necessary, and it&#x27;s desperately inefficient</span><br>        <span class="hljs-comment">// if pre-loading is enabled on this file.</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>    &#125;<br>  <br>    <span class="hljs-keyword">final</span> LuceneFilesExtensions <span class="hljs-keyword">extension</span> = LuceneFilesExtensions.fromExtension(FileSwitchDirectory.getExtension(name));<br>    <span class="hljs-keyword">if</span> (<span class="hljs-keyword">extension</span> == <span class="hljs-keyword">null</span> || <span class="hljs-keyword">extension</span>.shouldMmap() == <span class="hljs-keyword">false</span>) &#123;<br>        <span class="hljs-comment">// Other files are either less performance-sensitive (e.g. stored field index, norms metadata)</span><br>        <span class="hljs-comment">// or are large and have a random access pattern and mmap leads to page cache trashing</span><br>        <span class="hljs-comment">// (e.g. stored fields and term vectors).</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>文件是否通过mmap读取，在代码中已经写死， 如下，以此为文件后缀名，描述， 是否是元数据，是否使用mmap加载</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><span class="hljs-constructor">CFE(<span class="hljs-string">&quot;cfe&quot;</span>, <span class="hljs-string">&quot;Compound Files Entries&quot;</span>, <span class="hljs-params">true</span>, <span class="hljs-params">false</span>)</span>,<br><span class="hljs-comment">// Compound files are tricky because they store all the information for the segment. Benchmarks</span><br><span class="hljs-comment">// suggested that not mapping them hurts performance.</span><br><span class="hljs-constructor">CFS(<span class="hljs-string">&quot;cfs&quot;</span>, <span class="hljs-string">&quot;Compound Files&quot;</span>, <span class="hljs-params">false</span>, <span class="hljs-params">true</span>)</span>,<br><span class="hljs-constructor">CMP(<span class="hljs-string">&quot;cmp&quot;</span>, <span class="hljs-string">&quot;Completion Index&quot;</span>, <span class="hljs-params">true</span>, <span class="hljs-params">false</span>)</span>,<br><span class="hljs-constructor">DII(<span class="hljs-string">&quot;dii&quot;</span>, <span class="hljs-string">&quot;Points Index&quot;</span>, <span class="hljs-params">false</span>, <span class="hljs-params">false</span>)</span>,<br><span class="hljs-comment">// dim files only apply up to lucene 8.x indices. It can be removed once we are in lucene 10</span><br><span class="hljs-constructor">DIM(<span class="hljs-string">&quot;dim&quot;</span>, <span class="hljs-string">&quot;Points&quot;</span>, <span class="hljs-params">false</span>, <span class="hljs-params">true</span>)</span>,<br><span class="hljs-comment">// MMapDirectory has special logic to read long\[\] arrays in little-endian order that helps speed</span><br><span class="hljs-comment">// up the decoding of postings. The same logic applies to positions (.pos) of offsets (.pay) but we</span><br><span class="hljs-comment">// are not mmaping them as queries that leverage positions are more costly and the decoding of postings</span><br><span class="hljs-comment">// tends to be less a bottleneck.</span><br><span class="hljs-constructor">DOC(<span class="hljs-string">&quot;doc&quot;</span>, <span class="hljs-string">&quot;Frequencies&quot;</span>, <span class="hljs-params">false</span>, <span class="hljs-params">true</span>)</span>,<br><span class="hljs-comment">// Doc values are typically performance-sensitive and hot in the page</span><br><span class="hljs-comment">// cache, so we use mmap, which provides better performance.</span><br><span class="hljs-constructor">DVD(<span class="hljs-string">&quot;dvd&quot;</span>, <span class="hljs-string">&quot;DocValues&quot;</span>, <span class="hljs-params">false</span>, <span class="hljs-params">true</span>)</span>,<br><span class="hljs-constructor">DVM(<span class="hljs-string">&quot;dvm&quot;</span>, <span class="hljs-string">&quot;DocValues Metadata&quot;</span>, <span class="hljs-params">true</span>, <span class="hljs-params">false</span>)</span>,<br><span class="hljs-constructor">FDM(<span class="hljs-string">&quot;fdm&quot;</span>, <span class="hljs-string">&quot;Field Metadata&quot;</span>, <span class="hljs-params">true</span>, <span class="hljs-params">false</span>)</span>,<br><span class="hljs-constructor">FDT(<span class="hljs-string">&quot;fdt&quot;</span>, <span class="hljs-string">&quot;Field Data&quot;</span>, <span class="hljs-params">false</span>, <span class="hljs-params">false</span>)</span>,<br><span class="hljs-constructor">FDX(<span class="hljs-string">&quot;fdx&quot;</span>, <span class="hljs-string">&quot;Field Index&quot;</span>, <span class="hljs-params">false</span>, <span class="hljs-params">false</span>)</span>,<br><span class="hljs-constructor">FNM(<span class="hljs-string">&quot;fnm&quot;</span>, <span class="hljs-string">&quot;Fields&quot;</span>, <span class="hljs-params">true</span>, <span class="hljs-params">false</span>)</span>,<br><span class="hljs-comment">// old extension</span><br><span class="hljs-constructor">KDD(<span class="hljs-string">&quot;kdd&quot;</span>, <span class="hljs-string">&quot;Points&quot;</span>, <span class="hljs-params">false</span>, <span class="hljs-params">true</span>)</span>,<br><span class="hljs-comment">// old extension</span><br><span class="hljs-constructor">KDI(<span class="hljs-string">&quot;kdi&quot;</span>, <span class="hljs-string">&quot;Points Index&quot;</span>, <span class="hljs-params">false</span>, <span class="hljs-params">true</span>)</span>,<br><span class="hljs-comment">// Lucene 8.6 point format metadata file</span><br><span class="hljs-constructor">KDM(<span class="hljs-string">&quot;kdm&quot;</span>, <span class="hljs-string">&quot;Points Metadata&quot;</span>, <span class="hljs-params">true</span>, <span class="hljs-params">false</span>)</span>,<br><span class="hljs-constructor">LIV(<span class="hljs-string">&quot;liv&quot;</span>, <span class="hljs-string">&quot;Live Documents&quot;</span>, <span class="hljs-params">false</span>, <span class="hljs-params">false</span>)</span>,<br><span class="hljs-constructor">LKP(<span class="hljs-string">&quot;lkp&quot;</span>, <span class="hljs-string">&quot;Completion Dictionary&quot;</span>, <span class="hljs-params">false</span>, <span class="hljs-params">false</span>)</span>,<br><span class="hljs-comment">// Norms are typically performance-sensitive and hot in the page</span><br><span class="hljs-comment">// cache, so we use mmap, which provides better performance.</span><br><span class="hljs-constructor">NVD(<span class="hljs-string">&quot;nvd&quot;</span>, <span class="hljs-string">&quot;Norms&quot;</span>, <span class="hljs-params">false</span>, <span class="hljs-params">true</span>)</span>,<br><span class="hljs-constructor">NVM(<span class="hljs-string">&quot;nvm&quot;</span>, <span class="hljs-string">&quot;Norms Metadata&quot;</span>, <span class="hljs-params">true</span>, <span class="hljs-params">false</span>)</span>,<br><span class="hljs-constructor">PAY(<span class="hljs-string">&quot;pay&quot;</span>, <span class="hljs-string">&quot;Payloads&quot;</span>, <span class="hljs-params">false</span>, <span class="hljs-params">false</span>)</span>,<br><span class="hljs-constructor">POS(<span class="hljs-string">&quot;pos&quot;</span>, <span class="hljs-string">&quot;Positions&quot;</span>, <span class="hljs-params">false</span>, <span class="hljs-params">false</span>)</span>,<br><span class="hljs-constructor">SI(<span class="hljs-string">&quot;si&quot;</span>, <span class="hljs-string">&quot;Segment Info&quot;</span>, <span class="hljs-params">true</span>, <span class="hljs-params">false</span>)</span>,<br><span class="hljs-comment">// Term dictionaries are typically performance-sensitive and hot in the page</span><br><span class="hljs-comment">// cache, so we use mmap, which provides better performance.</span><br><span class="hljs-constructor">TIM(<span class="hljs-string">&quot;tim&quot;</span>, <span class="hljs-string">&quot;Term Dictionary&quot;</span>, <span class="hljs-params">false</span>, <span class="hljs-params">true</span>)</span>,<br><span class="hljs-comment">// We want to open the terms index and KD-tree index off-heap to save memory, but this only performs</span><br><span class="hljs-comment">// well if using mmap.</span><br><span class="hljs-constructor">TIP(<span class="hljs-string">&quot;tip&quot;</span>, <span class="hljs-string">&quot;Term Index&quot;</span>, <span class="hljs-params">false</span>, <span class="hljs-params">true</span>)</span>,<br><span class="hljs-comment">// Lucene 8.6 terms metadata file</span><br><span class="hljs-constructor">TMD(<span class="hljs-string">&quot;tmd&quot;</span>, <span class="hljs-string">&quot;Term Dictionary Metadata&quot;</span>, <span class="hljs-params">true</span>, <span class="hljs-params">false</span>)</span>,<br><span class="hljs-comment">// Temporary Lucene file</span><br><span class="hljs-constructor">TMP(<span class="hljs-string">&quot;tmp&quot;</span>, <span class="hljs-string">&quot;Temporary File&quot;</span>, <span class="hljs-params">false</span>, <span class="hljs-params">false</span>)</span>,<br><span class="hljs-constructor">TVD(<span class="hljs-string">&quot;tvd&quot;</span>, <span class="hljs-string">&quot;Term Vector Documents&quot;</span>, <span class="hljs-params">false</span>, <span class="hljs-params">false</span>)</span>,<br><span class="hljs-constructor">TVF(<span class="hljs-string">&quot;tvf&quot;</span>, <span class="hljs-string">&quot;Term Vector Fields&quot;</span>, <span class="hljs-params">false</span>, <span class="hljs-params">false</span>)</span>,<br><span class="hljs-constructor">TVM(<span class="hljs-string">&quot;tvm&quot;</span>, <span class="hljs-string">&quot;Term Vector Metadata&quot;</span>, <span class="hljs-params">true</span>, <span class="hljs-params">false</span>)</span>,<br><span class="hljs-constructor">TVX(<span class="hljs-string">&quot;tvx&quot;</span>, <span class="hljs-string">&quot;Term Vector Index&quot;</span>, <span class="hljs-params">false</span>, <span class="hljs-params">false</span>)</span>,<br><span class="hljs-constructor">VEC(<span class="hljs-string">&quot;vec&quot;</span>, <span class="hljs-string">&quot;Vector Data&quot;</span>, <span class="hljs-params">false</span>, <span class="hljs-params">false</span>)</span>,<br><span class="hljs-comment">// Lucene 9.0 indexed vectors metadata</span><br><span class="hljs-constructor">VEM(<span class="hljs-string">&quot;vem&quot;</span>, <span class="hljs-string">&quot;Vector Metadata&quot;</span>, <span class="hljs-params">true</span>, <span class="hljs-params">false</span>)</span>;<br></code></pre></td></tr></table></figure><p>现在看看预加载的实现，其实现方式与HybridDirectory类型，区别点为this.delegate.setPreload(true)，其真正预加载由lucene实现，useDelegate内部判断方式改成了是否在配置文件中配置，即可以更改部分文件由mmap加载</p><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs aspectj"><span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">PreLoadMMapDirectory</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">MMapDirectory</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> MMapDirectory delegate;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> Set&lt;String&gt; preloadExtensions;<br>  <br>    PreLoadMMapDirectory(MMapDirectory delegate, LockFactory lockFactory, Set&lt;String&gt; preload) <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-keyword">super</span>(delegate.getDirectory(), lockFactory);<br>        <span class="hljs-keyword">super</span>.setPreload(<span class="hljs-keyword">false</span>);<br>        <span class="hljs-keyword">this</span>.delegate = delegate;<br>        <span class="hljs-keyword">this</span>.delegate.setPreload(<span class="hljs-keyword">true</span>);<br>        <span class="hljs-keyword">this</span>.preloadExtensions = preload;<br>        <span class="hljs-keyword">assert</span> getPreload() == <span class="hljs-keyword">false</span>;<br>    &#125;<br>  <br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">setPreload</span><span class="hljs-params">(<span class="hljs-keyword">boolean</span> preload)</span> </span>&#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> IllegalArgumentException(<span class="hljs-string">&quot;can&#x27;t set preload on a preload-wrapper&quot;</span>);<br>    &#125;<br>  <br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-function">IndexInput <span class="hljs-title">openInput</span><span class="hljs-params">(String name, IOContext context)</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>        <span class="hljs-keyword">if</span> (useDelegate(name)) &#123;<br>            <span class="hljs-comment">// we need to do these checks on the outer directory since the inner doesn&#x27;t know about pending deletes</span><br>            ensureOpen();<br>            ensureCanRead(name);<br>            <span class="hljs-function"><span class="hljs-keyword">return</span> delegate.<span class="hljs-title">openInput</span><span class="hljs-params">(name, context)</span></span>;<br>        &#125;<br>        <span class="hljs-function"><span class="hljs-keyword">return</span> <span class="hljs-keyword">super</span>.<span class="hljs-title">openInput</span><span class="hljs-params">(name, context)</span></span>;<br>    &#125;<br>  <br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">synchronized</span> <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">close</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>        IOUtils.close(<span class="hljs-keyword">super</span>::close, delegate);<br>    &#125;<br>  <br>    <span class="hljs-function"><span class="hljs-keyword">boolean</span> <span class="hljs-title">useDelegate</span><span class="hljs-params">(String name)</span> </span>&#123;<br>        <span class="hljs-keyword">final</span> String extension = FileSwitchDirectory.getExtension(name);<br>        <span class="hljs-function"><span class="hljs-keyword">return</span> preloadExtensions.<span class="hljs-title">contains</span><span class="hljs-params">(extension)</span></span>;<br>    &#125;<br>  <br>    <span class="hljs-function">MMapDirectory <span class="hljs-title">getDelegate</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> delegate;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>大数据</tag>
      
      <tag>ElasticSearch</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>「Druid」tranquility中加载druid扩展报错</title>
    <link href="/2023/07/27/%E3%80%8CDruid%E3%80%8Dtranquility%E4%B8%AD%E5%8A%A0%E8%BD%BDdruid%E6%89%A9%E5%B1%95%E6%8A%A5%E9%94%99/"/>
    <url>/2023/07/27/%E3%80%8CDruid%E3%80%8Dtranquility%E4%B8%AD%E5%8A%A0%E8%BD%BDdruid%E6%89%A9%E5%B1%95%E6%8A%A5%E9%94%99/</url>
    
    <content type="html"><![CDATA[<p>[错误详细]<br>在tranquility的extensions中、或命令行中加在druid扩展，启动后被告，错误如下：  </p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-number">2019</span>-<span class="hljs-number">04</span>-<span class="hljs-number">04</span> <span class="hljs-number">15</span>:<span class="hljs-number">01</span>:<span class="hljs-number">55</span>,<span class="hljs-number">480</span> - <span class="hljs-selector-attr">[ERROR]</span> - from com<span class="hljs-selector-class">.metamx</span><span class="hljs-selector-class">.tranquility</span><span class="hljs-selector-class">.kafka</span><span class="hljs-selector-class">.KafkaConsumer</span> <span class="hljs-keyword">in</span> KafkaConsumer-<span class="hljs-number">0</span><br>Exception:<br>java<span class="hljs-selector-class">.lang</span><span class="hljs-selector-class">.NoClassDefFoundError</span>: Could not initialize class com<span class="hljs-selector-class">.metamx</span><span class="hljs-selector-class">.tranquility</span><span class="hljs-selector-class">.druid</span>.DruidGuicer$<br>at com<span class="hljs-selector-class">.metamx</span><span class="hljs-selector-class">.tranquility</span><span class="hljs-selector-class">.druid</span>.DruidBeams$<span class="hljs-selector-class">.makeFireDepartment</span>(DruidBeams<span class="hljs-selector-class">.scala</span>:<span class="hljs-number">406</span>) ~<span class="hljs-selector-attr">[io.druid.tranquility-core-0.8.0.jar:0.8.0]</span><br>at com<span class="hljs-selector-class">.metamx</span><span class="hljs-selector-class">.tranquility</span><span class="hljs-selector-class">.druid</span>.DruidBeams$<span class="hljs-selector-class">.fromConfigInternal</span>(DruidBeams<span class="hljs-selector-class">.scala</span>:<span class="hljs-number">291</span>) ~<span class="hljs-selector-attr">[io.druid.tranquility-core-0.8.0.jar:0.8.0]</span><br>at com<span class="hljs-selector-class">.metamx</span><span class="hljs-selector-class">.tranquility</span><span class="hljs-selector-class">.druid</span>.DruidBeams$<span class="hljs-selector-class">.fromConfig</span>(DruidBeams<span class="hljs-selector-class">.scala</span>:<span class="hljs-number">199</span>) ~<span class="hljs-selector-attr">[io.druid.tranquility-core-0.8.0.jar:0.8.0]</span><br>at com<span class="hljs-selector-class">.metamx</span><span class="hljs-selector-class">.tranquility</span><span class="hljs-selector-class">.kafka</span>.KafkaBeamUtils$<span class="hljs-selector-class">.createTranquilizer</span>(KafkaBeamUtils<span class="hljs-selector-class">.scala</span>:<span class="hljs-number">40</span>) ~<span class="hljs-selector-attr">[io.druid.tranquility-kafka-0.8.0.jar:0.8.0]</span><br>at com<span class="hljs-selector-class">.metamx</span><span class="hljs-selector-class">.tranquility</span><span class="hljs-selector-class">.kafka</span><span class="hljs-selector-class">.KafkaBeamUtils</span><span class="hljs-selector-class">.createTranquilizer</span>(KafkaBeamUtils.scala) ~<span class="hljs-selector-attr">[io.druid.tranquility-kafka-0.8.0.jar:0.8.0]</span><br>at com<span class="hljs-selector-class">.metamx</span><span class="hljs-selector-class">.tranquility</span><span class="hljs-selector-class">.kafka</span><span class="hljs-selector-class">.writer</span><span class="hljs-selector-class">.TranquilityEventWriter</span>.&lt;init&gt;(TranquilityEventWriter<span class="hljs-selector-class">.java</span>:<span class="hljs-number">64</span>) ~<span class="hljs-selector-attr">[io.druid.tranquility-kafka-0.8.0.jar:0.8.0]</span><br>at com<span class="hljs-selector-class">.metamx</span><span class="hljs-selector-class">.tranquility</span><span class="hljs-selector-class">.kafka</span><span class="hljs-selector-class">.writer</span><span class="hljs-selector-class">.WriterController</span><span class="hljs-selector-class">.createWriter</span>(WriterController<span class="hljs-selector-class">.java</span>:<span class="hljs-number">171</span>) ~<span class="hljs-selector-attr">[io.druid.tranquility-kafka-0.8.0.jar:0.8.0]</span><br>at com<span class="hljs-selector-class">.metamx</span><span class="hljs-selector-class">.tranquility</span><span class="hljs-selector-class">.kafka</span><span class="hljs-selector-class">.writer</span><span class="hljs-selector-class">.WriterController</span><span class="hljs-selector-class">.getWriter</span>(WriterController<span class="hljs-selector-class">.java</span>:<span class="hljs-number">98</span>) ~<span class="hljs-selector-attr">[io.druid.tranquility-kafka-0.8.0.jar:0.8.0]</span><br>at com<span class="hljs-selector-class">.metamx</span><span class="hljs-selector-class">.tranquility</span><span class="hljs-selector-class">.kafka</span>.KafkaConsumer$<span class="hljs-number">2</span><span class="hljs-selector-class">.run</span>(KafkaConsumer<span class="hljs-selector-class">.java</span>:<span class="hljs-number">231</span>) ~<span class="hljs-selector-attr">[io.druid.tranquility-kafka-0.8.0.jar:0.8.0]</span><br>at java<span class="hljs-selector-class">.util</span><span class="hljs-selector-class">.concurrent</span>.Executors<span class="hljs-variable">$RunnableAdapter</span><span class="hljs-selector-class">.call</span>(Executors<span class="hljs-selector-class">.java</span>:<span class="hljs-number">511</span>) <span class="hljs-selector-attr">[na:1.8.0_201]</span><br>at java<span class="hljs-selector-class">.util</span><span class="hljs-selector-class">.concurrent</span><span class="hljs-selector-class">.FutureTask</span><span class="hljs-selector-class">.run</span>(FutureTask<span class="hljs-selector-class">.java</span>:<span class="hljs-number">266</span>) <span class="hljs-selector-attr">[na:1.8.0_201]</span><br>at java<span class="hljs-selector-class">.util</span><span class="hljs-selector-class">.concurrent</span><span class="hljs-selector-class">.ThreadPoolExecutor</span><span class="hljs-selector-class">.runWorker</span>(ThreadPoolExecutor<span class="hljs-selector-class">.java</span>:<span class="hljs-number">1149</span>) <span class="hljs-selector-attr">[na:1.8.0_201]</span><br>at java<span class="hljs-selector-class">.util</span><span class="hljs-selector-class">.concurrent</span>.ThreadPoolExecutor<span class="hljs-variable">$Worker</span><span class="hljs-selector-class">.run</span>(ThreadPoolExecutor<span class="hljs-selector-class">.java</span>:<span class="hljs-number">624</span>) <span class="hljs-selector-attr">[na:1.8.0_201]</span><br>at java<span class="hljs-selector-class">.lang</span><span class="hljs-selector-class">.Thread</span><span class="hljs-selector-class">.run</span>(Thread<span class="hljs-selector-class">.java</span>:<span class="hljs-number">748</span>) <span class="hljs-selector-attr">[na:1.8.0_201]</span><br></code></pre></td></tr></table></figure><p>[问题原因]<br>tranquility中引用的jackson,和扩展中引用的jackson版本冲突</p><p>[解决]<br>在0.9.0的druid中build插件放入tranquility中</p>]]></content>
    
    
    
    <tags>
      
      <tag>大数据</tag>
      
      <tag>Driud</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>「Druid」tranquility中查询粒度设置为5分钟-FIVE-MINUTE-出错</title>
    <link href="/2023/07/27/%E3%80%8CDruid%E3%80%8Dtranquility%E4%B8%AD%E6%9F%A5%E8%AF%A2%E7%B2%92%E5%BA%A6%E8%AE%BE%E7%BD%AE%E4%B8%BA5%E5%88%86%E9%92%9F-FIVE-MINUTE-%E5%87%BA%E9%94%99/"/>
    <url>/2023/07/27/%E3%80%8CDruid%E3%80%8Dtranquility%E4%B8%AD%E6%9F%A5%E8%AF%A2%E7%B2%92%E5%BA%A6%E8%AE%BE%E7%BD%AE%E4%B8%BA5%E5%88%86%E9%92%9F-FIVE-MINUTE-%E5%87%BA%E9%94%99/</url>
    
    <content type="html"><![CDATA[<p>[错误详细]<br>在druid中查询时间粒度可以设置为MINUTE、HOURE、FILVE_MINUTE等，但在tranquility设置查询粒度为5分钟，启动后报错，错误信息如下  </p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><code class="hljs stylus">ava<span class="hljs-selector-class">.lang</span><span class="hljs-selector-class">.IllegalArgumentException</span>: Instantiation of <span class="hljs-selector-attr">[simple type, class io.druid.granularity.QueryGranularity]</span> value failed: No enum constant io<span class="hljs-selector-class">.druid</span><span class="hljs-selector-class">.granularity</span><span class="hljs-selector-class">.QueryGranularity</span><span class="hljs-selector-class">.MillisIn</span><span class="hljs-selector-class">.FIVE_MINUTE</span><br>at com<span class="hljs-selector-class">.fasterxml</span><span class="hljs-selector-class">.jackson</span><span class="hljs-selector-class">.databind</span><span class="hljs-selector-class">.ObjectMapper</span>.<span class="hljs-built_in">_convert</span>(ObjectMapper<span class="hljs-selector-class">.java</span>:<span class="hljs-number">2774</span>) ~<span class="hljs-selector-attr">[com.fasterxml.jackson.core.jackson-databind-2.4.6.jar:2.4.6]</span><br>at com<span class="hljs-selector-class">.fasterxml</span><span class="hljs-selector-class">.jackson</span><span class="hljs-selector-class">.databind</span><span class="hljs-selector-class">.ObjectMapper</span><span class="hljs-selector-class">.convertValue</span>(ObjectMapper<span class="hljs-selector-class">.java</span>:<span class="hljs-number">2700</span>) ~<span class="hljs-selector-attr">[com.fasterxml.jackson.core.jackson-databind-2.4.6.jar:2.4.6]</span><br>at com<span class="hljs-selector-class">.metamx</span><span class="hljs-selector-class">.tranquility</span><span class="hljs-selector-class">.druid</span>.DruidBeams$<span class="hljs-selector-class">.makeFireDepartment</span>(DruidBeams<span class="hljs-selector-class">.scala</span>:<span class="hljs-number">406</span>) ~<span class="hljs-selector-attr">[io.druid.tranquility-core-0.8.0.jar:0.8.0]</span><br>at com<span class="hljs-selector-class">.metamx</span><span class="hljs-selector-class">.tranquility</span><span class="hljs-selector-class">.druid</span>.DruidBeams$<span class="hljs-selector-class">.fromConfigInternal</span>(DruidBeams<span class="hljs-selector-class">.scala</span>:<span class="hljs-number">291</span>) ~<span class="hljs-selector-attr">[io.druid.tranquility-core-0.8.0.jar:0.8.0]</span><br>at com<span class="hljs-selector-class">.metamx</span><span class="hljs-selector-class">.tranquility</span><span class="hljs-selector-class">.druid</span>.DruidBeams$<span class="hljs-selector-class">.fromConfig</span>(DruidBeams<span class="hljs-selector-class">.scala</span>:<span class="hljs-number">199</span>) ~<span class="hljs-selector-attr">[io.druid.tranquility-core-0.8.0.jar:0.8.0]</span><br>at com<span class="hljs-selector-class">.metamx</span><span class="hljs-selector-class">.tranquility</span><span class="hljs-selector-class">.kafka</span>.KafkaBeamUtils$<span class="hljs-selector-class">.createTranquilizer</span>(KafkaBeamUtils<span class="hljs-selector-class">.scala</span>:<span class="hljs-number">40</span>) ~<span class="hljs-selector-attr">[io.druid.tranquility-kafka-0.8.0.jar:0.8.0]</span><br>at com<span class="hljs-selector-class">.metamx</span><span class="hljs-selector-class">.tranquility</span><span class="hljs-selector-class">.kafka</span><span class="hljs-selector-class">.KafkaBeamUtils</span><span class="hljs-selector-class">.createTranquilizer</span>(KafkaBeamUtils.scala) ~<span class="hljs-selector-attr">[io.druid.tranquility-kafka-0.8.0.jar:0.8.0]</span><br>at com<span class="hljs-selector-class">.metamx</span><span class="hljs-selector-class">.tranquility</span><span class="hljs-selector-class">.kafka</span><span class="hljs-selector-class">.writer</span><span class="hljs-selector-class">.TranquilityEventWriter</span>.&lt;init&gt;(TranquilityEventWriter<span class="hljs-selector-class">.java</span>:<span class="hljs-number">64</span>) ~<span class="hljs-selector-attr">[io.druid.tranquility-kafka-0.8.0.jar:0.8.0]</span><br>at com<span class="hljs-selector-class">.metamx</span><span class="hljs-selector-class">.tranquility</span><span class="hljs-selector-class">.kafka</span><span class="hljs-selector-class">.writer</span><span class="hljs-selector-class">.WriterController</span><span class="hljs-selector-class">.createWriter</span>(WriterController<span class="hljs-selector-class">.java</span>:<span class="hljs-number">171</span>) ~<span class="hljs-selector-attr">[io.druid.tranquility-kafka-0.8.0.jar:0.8.0]</span><br>at com<span class="hljs-selector-class">.metamx</span><span class="hljs-selector-class">.tranquility</span><span class="hljs-selector-class">.kafka</span><span class="hljs-selector-class">.writer</span><span class="hljs-selector-class">.WriterController</span><span class="hljs-selector-class">.getWriter</span>(WriterController<span class="hljs-selector-class">.java</span>:<span class="hljs-number">98</span>) ~<span class="hljs-selector-attr">[io.druid.tranquility-kafka-0.8.0.jar:0.8.0]</span><br>at com<span class="hljs-selector-class">.metamx</span><span class="hljs-selector-class">.tranquility</span><span class="hljs-selector-class">.kafka</span>.KafkaConsumer$<span class="hljs-number">2</span><span class="hljs-selector-class">.run</span>(KafkaConsumer<span class="hljs-selector-class">.java</span>:<span class="hljs-number">231</span>) ~<span class="hljs-selector-attr">[io.druid.tranquility-kafka-0.8.0.jar:0.8.0]</span><br>at java<span class="hljs-selector-class">.util</span><span class="hljs-selector-class">.concurrent</span>.Executors<span class="hljs-variable">$RunnableAdapter</span><span class="hljs-selector-class">.call</span>(Executors<span class="hljs-selector-class">.java</span>:<span class="hljs-number">511</span>) <span class="hljs-selector-attr">[na:1.8.0_201]</span><br>at java<span class="hljs-selector-class">.util</span><span class="hljs-selector-class">.concurrent</span><span class="hljs-selector-class">.FutureTask</span><span class="hljs-selector-class">.run</span>(FutureTask<span class="hljs-selector-class">.java</span>:<span class="hljs-number">266</span>) <span class="hljs-selector-attr">[na:1.8.0_201]</span><br>at java<span class="hljs-selector-class">.util</span><span class="hljs-selector-class">.concurrent</span><span class="hljs-selector-class">.ThreadPoolExecutor</span><span class="hljs-selector-class">.runWorker</span>(ThreadPoolExecutor<span class="hljs-selector-class">.java</span>:<span class="hljs-number">1149</span>) <span class="hljs-selector-attr">[na:1.8.0_201]</span><br>at java<span class="hljs-selector-class">.util</span><span class="hljs-selector-class">.concurrent</span>.ThreadPoolExecutor<span class="hljs-variable">$Worker</span><span class="hljs-selector-class">.run</span>(ThreadPoolExecutor<span class="hljs-selector-class">.java</span>:<span class="hljs-number">624</span>) <span class="hljs-selector-attr">[na:1.8.0_201]</span><br>at java<span class="hljs-selector-class">.lang</span><span class="hljs-selector-class">.Thread</span><span class="hljs-selector-class">.run</span>(Thread<span class="hljs-selector-class">.java</span>:<span class="hljs-number">748</span>) <span class="hljs-selector-attr">[na:1.8.0_201]</span><br>Caused by: com<span class="hljs-selector-class">.fasterxml</span><span class="hljs-selector-class">.jackson</span><span class="hljs-selector-class">.databind</span><span class="hljs-selector-class">.JsonMappingException</span>: Instantiation of <span class="hljs-selector-attr">[simple type, class io.druid.granularity.QueryGranularity]</span> value failed: No enum constant io<span class="hljs-selector-class">.druid</span><span class="hljs-selector-class">.granularity</span><span class="hljs-selector-class">.QueryGranularity</span><span class="hljs-selector-class">.MillisIn</span><span class="hljs-selector-class">.FIVE_MINUTE</span><br>at com<span class="hljs-selector-class">.fasterxml</span><span class="hljs-selector-class">.jackson</span><span class="hljs-selector-class">.databind</span><span class="hljs-selector-class">.deser</span><span class="hljs-selector-class">.std</span><span class="hljs-selector-class">.StdValueInstantiator</span><span class="hljs-selector-class">.wrapException</span>(StdValueInstantiator<span class="hljs-selector-class">.java</span>:<span class="hljs-number">405</span>) ~<span class="hljs-selector-attr">[com.fasterxml.jackson.core.jackson-databind-2.4.6.jar:2.4.6]</span><br>at com<span class="hljs-selector-class">.fasterxml</span><span class="hljs-selector-class">.jackson</span><span class="hljs-selector-class">.databind</span><span class="hljs-selector-class">.deser</span><span class="hljs-selector-class">.std</span><span class="hljs-selector-class">.StdValueInstantiator</span><span class="hljs-selector-class">.createFromString</span>(StdValueInstantiator<span class="hljs-selector-class">.java</span>:<span class="hljs-number">284</span>) ~<span class="hljs-selector-attr">[com.fasterxml.jackson.core.jackson-databind-2.4.6.jar:2.4.6]</span><br>at com<span class="hljs-selector-class">.fasterxml</span><span class="hljs-selector-class">.jackson</span><span class="hljs-selector-class">.databind</span><span class="hljs-selector-class">.deser</span><span class="hljs-selector-class">.BeanDeserializerBase</span><span class="hljs-selector-class">.deserializeFromString</span>(BeanDeserializerBase<span class="hljs-selector-class">.java</span>:<span class="hljs-number">1141</span>) ~<span class="hljs-selector-attr">[com.fasterxml.jackson.core.jackson-databind-2.4.6.jar:2.4.6]</span><br>at com<span class="hljs-selector-class">.fasterxml</span><span class="hljs-selector-class">.jackson</span><span class="hljs-selector-class">.databind</span><span class="hljs-selector-class">.deser</span><span class="hljs-selector-class">.BeanDeserializer</span>.<span class="hljs-built_in">_deserializeOther</span>(BeanDeserializer<span class="hljs-selector-class">.java</span>:<span class="hljs-number">135</span>) ~<span class="hljs-selector-attr">[com.fasterxml.jackson.core.jackson-databind-2.4.6.jar:2.4.6]</span><br>at com<span class="hljs-selector-class">.fasterxml</span><span class="hljs-selector-class">.jackson</span><span class="hljs-selector-class">.databind</span><span class="hljs-selector-class">.deser</span><span class="hljs-selector-class">.BeanDeserializer</span><span class="hljs-selector-class">.deserialize</span>(BeanDeserializer<span class="hljs-selector-class">.java</span>:<span class="hljs-number">126</span>) ~<span class="hljs-selector-attr">[com.fasterxml.jackson.core.jackson-databind-2.4.6.jar:2.4.6]</span><br>at com<span class="hljs-selector-class">.fasterxml</span><span class="hljs-selector-class">.jackson</span><span class="hljs-selector-class">.databind</span><span class="hljs-selector-class">.jsontype</span><span class="hljs-selector-class">.impl</span><span class="hljs-selector-class">.AsPropertyTypeDeserializer</span>.<span class="hljs-built_in">_deserializeTypedUsingDefaultImpl</span>(AsPropertyTypeDeserializer<span class="hljs-selector-class">.java</span>:<span class="hljs-number">129</span>) ~<span class="hljs-selector-attr">[com.fasterxml.jackson.core.jackson-databind-2.4.6.jar:2.4.6]</span><br>at com<span class="hljs-selector-class">.fasterxml</span><span class="hljs-selector-class">.jackson</span><span class="hljs-selector-class">.databind</span><span class="hljs-selector-class">.jsontype</span><span class="hljs-selector-class">.impl</span><span class="hljs-selector-class">.AsPropertyTypeDeserializer</span><span class="hljs-selector-class">.deserializeTypedFromObject</span>(AsPropertyTypeDeserializer<span class="hljs-selector-class">.java</span>:<span class="hljs-number">75</span>) ~<span class="hljs-selector-attr">[com.fasterxml.jackson.core.jackson-databind-2.4.6.jar:2.4.6]</span><br>at com<span class="hljs-selector-class">.fasterxml</span><span class="hljs-selector-class">.jackson</span><span class="hljs-selector-class">.databind</span><span class="hljs-selector-class">.deser</span><span class="hljs-selector-class">.BeanDeserializerBase</span><span class="hljs-selector-class">.deserializeWithType</span>(BeanDeserializerBase<span class="hljs-selector-class">.java</span>:<span class="hljs-number">956</span>) ~<span class="hljs-selector-attr">[com.fasterxml.jackson.core.jackson-databind-2.4.6.jar:2.4.6]</span><br>at com<span class="hljs-selector-class">.fasterxml</span><span class="hljs-selector-class">.jackson</span><span class="hljs-selector-class">.databind</span><span class="hljs-selector-class">.deser</span><span class="hljs-selector-class">.SettableBeanProperty</span><span class="hljs-selector-class">.deserialize</span>(SettableBeanProperty<span class="hljs-selector-class">.java</span>:<span class="hljs-number">536</span>) ~<span class="hljs-selector-attr">[com.fasterxml.jackson.core.jackson-databind-2.4.6.jar:2.4.6]</span><br>at com<span class="hljs-selector-class">.fasterxml</span><span class="hljs-selector-class">.jackson</span><span class="hljs-selector-class">.databind</span><span class="hljs-selector-class">.deser</span><span class="hljs-selector-class">.BeanDeserializer</span>.<span class="hljs-built_in">_deserializeUsingPropertyBased</span>(BeanDeserializer<span class="hljs-selector-class">.java</span>:<span class="hljs-number">344</span>) ~<span class="hljs-selector-attr">[com.fasterxml.jackson.core.jackson-databind-2.4.6.jar:2.4.6]</span><br>at com<span class="hljs-selector-class">.fasterxml</span><span class="hljs-selector-class">.jackson</span><span class="hljs-selector-class">.databind</span><span class="hljs-selector-class">.deser</span><span class="hljs-selector-class">.BeanDeserializerBase</span><span class="hljs-selector-class">.deserializeFromObjectUsingNonDefault</span>(BeanDeserializerBase<span class="hljs-selector-class">.java</span>:<span class="hljs-number">1064</span>) ~<span class="hljs-selector-attr">[com.fasterxml.jackson.core.jackson-databind-2.4.6.jar:2.4.6]</span><br>at com<span class="hljs-selector-class">.fasterxml</span><span class="hljs-selector-class">.jackson</span><span class="hljs-selector-class">.databind</span><span class="hljs-selector-class">.deser</span><span class="hljs-selector-class">.BeanDeserializer</span><span class="hljs-selector-class">.deserializeFromObject</span>(BeanDeserializer<span class="hljs-selector-class">.java</span>:<span class="hljs-number">264</span>) ~<span class="hljs-selector-attr">[com.fasterxml.jackson.core.jackson-databind-2.4.6.jar:2.4.6]</span><br>at com<span class="hljs-selector-class">.fasterxml</span><span class="hljs-selector-class">.jackson</span><span class="hljs-selector-class">.databind</span><span class="hljs-selector-class">.deser</span><span class="hljs-selector-class">.BeanDeserializer</span>.<span class="hljs-built_in">_deserializeOther</span>(BeanDeserializer<span class="hljs-selector-class">.java</span>:<span class="hljs-number">156</span>) ~<span class="hljs-selector-attr">[com.fasterxml.jackson.core.jackson-databind-2.4.6.jar:2.4.6]</span><br>at com<span class="hljs-selector-class">.fasterxml</span><span class="hljs-selector-class">.jackson</span><span class="hljs-selector-class">.databind</span><span class="hljs-selector-class">.deser</span><span class="hljs-selector-class">.BeanDeserializer</span><span class="hljs-selector-class">.deserialize</span>(BeanDeserializer<span class="hljs-selector-class">.java</span>:<span class="hljs-number">126</span>) ~<span class="hljs-selector-attr">[com.fasterxml.jackson.core.jackson-databind-2.4.6.jar:2.4.6]</span><br>at com<span class="hljs-selector-class">.fasterxml</span><span class="hljs-selector-class">.jackson</span><span class="hljs-selector-class">.databind</span><span class="hljs-selector-class">.jsontype</span><span class="hljs-selector-class">.impl</span><span class="hljs-selector-class">.AsPropertyTypeDeserializer</span>.<span class="hljs-built_in">_deserializeTypedForId</span>(AsPropertyTypeDeserializer<span class="hljs-selector-class">.java</span>:<span class="hljs-number">113</span>) ~<span class="hljs-selector-attr">[com.fasterxml.jackson.core.jackson-databind-2.4.6.jar:2.4.6]</span><br>at com<span class="hljs-selector-class">.fasterxml</span><span class="hljs-selector-class">.jackson</span><span class="hljs-selector-class">.databind</span><span class="hljs-selector-class">.jsontype</span><span class="hljs-selector-class">.impl</span><span class="hljs-selector-class">.AsPropertyTypeDeserializer</span><span class="hljs-selector-class">.deserializeTypedFromObject</span>(AsPropertyTypeDeserializer<span class="hljs-selector-class">.java</span>:<span class="hljs-number">84</span>) ~<span class="hljs-selector-attr">[com.fasterxml.jackson.core.jackson-databind-2.4.6.jar:2.4.6]</span><br>at com<span class="hljs-selector-class">.fasterxml</span><span class="hljs-selector-class">.jackson</span><span class="hljs-selector-class">.databind</span><span class="hljs-selector-class">.deser</span><span class="hljs-selector-class">.AbstractDeserializer</span><span class="hljs-selector-class">.deserializeWithType</span>(AbstractDeserializer<span class="hljs-selector-class">.java</span>:<span class="hljs-number">132</span>) ~<span class="hljs-selector-attr">[com.fasterxml.jackson.core.jackson-databind-2.4.6.jar:2.4.6]</span><br>at com<span class="hljs-selector-class">.fasterxml</span><span class="hljs-selector-class">.jackson</span><span class="hljs-selector-class">.databind</span><span class="hljs-selector-class">.deser</span><span class="hljs-selector-class">.SettableBeanProperty</span><span class="hljs-selector-class">.deserialize</span>(SettableBeanProperty<span class="hljs-selector-class">.java</span>:<span class="hljs-number">536</span>) ~<span class="hljs-selector-attr">[com.fasterxml.jackson.core.jackson-databind-2.4.6.jar:2.4.6]</span><br>at com<span class="hljs-selector-class">.fasterxml</span><span class="hljs-selector-class">.jackson</span><span class="hljs-selector-class">.databind</span><span class="hljs-selector-class">.deser</span><span class="hljs-selector-class">.BeanDeserializer</span>.<span class="hljs-built_in">_deserializeUsingPropertyBased</span>(BeanDeserializer<span class="hljs-selector-class">.java</span>:<span class="hljs-number">344</span>) ~<span class="hljs-selector-attr">[com.fasterxml.jackson.core.jackson-databind-2.4.6.jar:2.4.6]</span><br>at com<span class="hljs-selector-class">.fasterxml</span><span class="hljs-selector-class">.jackson</span><span class="hljs-selector-class">.databind</span><span class="hljs-selector-class">.deser</span><span class="hljs-selector-class">.BeanDeserializerBase</span><span class="hljs-selector-class">.deserializeFromObjectUsingNonDefault</span>(BeanDeserializerBase<span class="hljs-selector-class">.java</span>:<span class="hljs-number">1064</span>) ~<span class="hljs-selector-attr">[com.fasterxml.jackson.core.jackson-databind-2.4.6.jar:2.4.6]</span><br>at com<span class="hljs-selector-class">.fasterxml</span><span class="hljs-selector-class">.jackson</span><span class="hljs-selector-class">.databind</span><span class="hljs-selector-class">.deser</span><span class="hljs-selector-class">.BeanDeserializer</span><span class="hljs-selector-class">.deserializeFromObject</span>(BeanDeserializer<span class="hljs-selector-class">.java</span>:<span class="hljs-number">264</span>) ~<span class="hljs-selector-attr">[com.fasterxml.jackson.core.jackson-databind-2.4.6.jar:2.4.6]</span><br>at com<span class="hljs-selector-class">.fasterxml</span><span class="hljs-selector-class">.jackson</span><span class="hljs-selector-class">.databind</span><span class="hljs-selector-class">.deser</span><span class="hljs-selector-class">.BeanDeserializer</span><span class="hljs-selector-class">.deserialize</span>(BeanDeserializer<span class="hljs-selector-class">.java</span>:<span class="hljs-number">124</span>) ~<span class="hljs-selector-attr">[com.fasterxml.jackson.core.jackson-databind-2.4.6.jar:2.4.6]</span><br>at com<span class="hljs-selector-class">.fasterxml</span><span class="hljs-selector-class">.jackson</span><span class="hljs-selector-class">.databind</span><span class="hljs-selector-class">.deser</span><span class="hljs-selector-class">.SettableBeanProperty</span><span class="hljs-selector-class">.deserialize</span>(SettableBeanProperty<span class="hljs-selector-class">.java</span>:<span class="hljs-number">538</span>) ~<span class="hljs-selector-attr">[com.fasterxml.jackson.core.jackson-databind-2.4.6.jar:2.4.6]</span><br>at com<span class="hljs-selector-class">.fasterxml</span><span class="hljs-selector-class">.jackson</span><span class="hljs-selector-class">.databind</span><span class="hljs-selector-class">.deser</span><span class="hljs-selector-class">.BeanDeserializer</span>.<span class="hljs-built_in">_deserializeUsingPropertyBased</span>(BeanDeserializer<span class="hljs-selector-class">.java</span>:<span class="hljs-number">344</span>) ~<span class="hljs-selector-attr">[com.fasterxml.jackson.core.jackson-databind-2.4.6.jar:2.4.6]</span><br>at com<span class="hljs-selector-class">.fasterxml</span><span class="hljs-selector-class">.jackson</span><span class="hljs-selector-class">.databind</span><span class="hljs-selector-class">.deser</span><span class="hljs-selector-class">.BeanDeserializerBase</span><span class="hljs-selector-class">.deserializeFromObjectUsingNonDefault</span>(BeanDeserializerBase<span class="hljs-selector-class">.java</span>:<span class="hljs-number">1064</span>) ~<span class="hljs-selector-attr">[com.fasterxml.jackson.core.jackson-databind-2.4.6.jar:2.4.6]</span><br>at com<span class="hljs-selector-class">.fasterxml</span><span class="hljs-selector-class">.jackson</span><span class="hljs-selector-class">.databind</span><span class="hljs-selector-class">.deser</span><span class="hljs-selector-class">.BeanDeserializer</span><span class="hljs-selector-class">.deserializeFromObject</span>(BeanDeserializer<span class="hljs-selector-class">.java</span>:<span class="hljs-number">264</span>) ~<span class="hljs-selector-attr">[com.fasterxml.jackson.core.jackson-databind-2.4.6.jar:2.4.6]</span><br>at com<span class="hljs-selector-class">.fasterxml</span><span class="hljs-selector-class">.jackson</span><span class="hljs-selector-class">.databind</span><span class="hljs-selector-class">.deser</span><span class="hljs-selector-class">.BeanDeserializer</span><span class="hljs-selector-class">.deserialize</span>(BeanDeserializer<span class="hljs-selector-class">.java</span>:<span class="hljs-number">124</span>) ~<span class="hljs-selector-attr">[com.fasterxml.jackson.core.jackson-databind-2.4.6.jar:2.4.6]</span><br>at com<span class="hljs-selector-class">.fasterxml</span><span class="hljs-selector-class">.jackson</span><span class="hljs-selector-class">.databind</span><span class="hljs-selector-class">.ObjectMapper</span>.<span class="hljs-built_in">_convert</span>(ObjectMapper<span class="hljs-selector-class">.java</span>:<span class="hljs-number">2769</span>) ~<span class="hljs-selector-attr">[com.fasterxml.jackson.core.jackson-databind-2.4.6.jar:2.4.6]</span><br>... <span class="hljs-number">15</span> common frames omitted<br>Caused by: java<span class="hljs-selector-class">.lang</span><span class="hljs-selector-class">.IllegalArgumentException</span>: No enum constant io<span class="hljs-selector-class">.druid</span><span class="hljs-selector-class">.granularity</span><span class="hljs-selector-class">.QueryGranularity</span><span class="hljs-selector-class">.MillisIn</span><span class="hljs-selector-class">.FIVE_MINUTE</span><br>at java<span class="hljs-selector-class">.lang</span><span class="hljs-selector-class">.Enum</span><span class="hljs-selector-class">.valueOf</span>(Enum<span class="hljs-selector-class">.java</span>:<span class="hljs-number">238</span>) ~<span class="hljs-selector-attr">[na:1.8.0_201]</span><br>at io<span class="hljs-selector-class">.druid</span><span class="hljs-selector-class">.granularity</span>.QueryGranularity<span class="hljs-variable">$MillisIn</span><span class="hljs-selector-class">.valueOf</span>(QueryGranularity<span class="hljs-selector-class">.java</span>:<span class="hljs-number">62</span>) ~<span class="hljs-selector-attr">[io.druid.druid-processing-0.9.0.jar:0.9.0]</span><br>at io<span class="hljs-selector-class">.druid</span><span class="hljs-selector-class">.granularity</span><span class="hljs-selector-class">.QueryGranularity</span><span class="hljs-selector-class">.convertValue</span>(QueryGranularity<span class="hljs-selector-class">.java</span>:<span class="hljs-number">79</span>) ~<span class="hljs-selector-attr">[io.druid.druid-processing-0.9.0.jar:0.9.0]</span><br>at io<span class="hljs-selector-class">.druid</span><span class="hljs-selector-class">.granularity</span><span class="hljs-selector-class">.QueryGranularity</span><span class="hljs-selector-class">.fromString</span>(QueryGranularity<span class="hljs-selector-class">.java</span>:<span class="hljs-number">59</span>) ~<span class="hljs-selector-attr">[io.druid.druid-processing-0.9.0.jar:0.9.0]</span><br>at sun<span class="hljs-selector-class">.reflect</span><span class="hljs-selector-class">.NativeMethodAccessorImpl</span><span class="hljs-selector-class">.invoke0</span>(Native Method) ~<span class="hljs-selector-attr">[na:1.8.0_201]</span><br>at sun<span class="hljs-selector-class">.reflect</span><span class="hljs-selector-class">.NativeMethodAccessorImpl</span><span class="hljs-selector-class">.invoke</span>(NativeMethodAccessorImpl<span class="hljs-selector-class">.java</span>:<span class="hljs-number">62</span>) ~<span class="hljs-selector-attr">[na:1.8.0_201]</span><br>at sun<span class="hljs-selector-class">.reflect</span><span class="hljs-selector-class">.DelegatingMethodAccessorImpl</span><span class="hljs-selector-class">.invoke</span>(DelegatingMethodAccessorImpl<span class="hljs-selector-class">.java</span>:<span class="hljs-number">43</span>) ~<span class="hljs-selector-attr">[na:1.8.0_201]</span><br>at java<span class="hljs-selector-class">.lang</span><span class="hljs-selector-class">.reflect</span><span class="hljs-selector-class">.Method</span><span class="hljs-selector-class">.invoke</span>(Method<span class="hljs-selector-class">.java</span>:<span class="hljs-number">498</span>) ~<span class="hljs-selector-attr">[na:1.8.0_201]</span><br>at com<span class="hljs-selector-class">.fasterxml</span><span class="hljs-selector-class">.jackson</span><span class="hljs-selector-class">.databind</span><span class="hljs-selector-class">.introspect</span><span class="hljs-selector-class">.AnnotatedMethod</span><span class="hljs-selector-class">.call1</span>(AnnotatedMethod<span class="hljs-selector-class">.java</span>:<span class="hljs-number">125</span>) ~<span class="hljs-selector-attr">[com.fasterxml.jackson.core.jackson-databind-2.4.6.jar:2.4.6]</span><br>at com<span class="hljs-selector-class">.fasterxml</span><span class="hljs-selector-class">.jackson</span><span class="hljs-selector-class">.databind</span><span class="hljs-selector-class">.deser</span><span class="hljs-selector-class">.std</span><span class="hljs-selector-class">.StdValueInstantiator</span><span class="hljs-selector-class">.createFromString</span>(StdValueInstantiator<span class="hljs-selector-class">.java</span>:<span class="hljs-number">282</span>) ~<span class="hljs-selector-attr">[com.fasterxml.jackson.core.jackson-databind-2.4.6.jar:2.4.6]</span><br>... <span class="hljs-number">41</span> common frames omitted<br><br><span class="hljs-number">2019</span>-<span class="hljs-number">04</span>-<span class="hljs-number">03</span> <span class="hljs-number">11</span>:<span class="hljs-number">06</span>:<span class="hljs-number">08</span>,<span class="hljs-number">485</span> - <span class="hljs-selector-attr">[ERROR]</span> - from com<span class="hljs-selector-class">.metamx</span><span class="hljs-selector-class">.tranquility</span><span class="hljs-selector-class">.kafka</span><span class="hljs-selector-class">.KafkaConsumer</span> <span class="hljs-keyword">in</span> KafkaConsumer-<span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p>[问题原因]<br>在tranquility的最新版本(0.8.2)中 引用的druid为0.9.0，0.9.0的druid不支持查询粒度设置为5分钟</p><p>[解决方法]<br>下载druid 0.9.0源代码，修改代码文件(<a href="https://github.com/apache/incubator-druid/blob/0.9.0/processing/src/main/java/io/druid/granularity/QueryGranularity.java">https://github.com/apache/incubator-druid/blob/0.9.0/processing/src/main/java/io/druid/granularity/QueryGranularity.java)</a>), 在MillisIn中加入FIVE_MINUTE，之后build代码文件，替换io.druid.druid-processing-0.9.0.jar</p>]]></content>
    
    
    
    <tags>
      
      <tag>大数据</tag>
      
      <tag>Driud</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>「工具」mac设置ssh不掉线</title>
    <link href="/2023/07/27/%E3%80%8C%E5%B7%A5%E5%85%B7%E3%80%8Dmac%E8%AE%BE%E7%BD%AEssh%E4%B8%8D%E6%8E%89%E7%BA%BF/"/>
    <url>/2023/07/27/%E3%80%8C%E5%B7%A5%E5%85%B7%E3%80%8Dmac%E8%AE%BE%E7%BD%AEssh%E4%B8%8D%E6%8E%89%E7%BA%BF/</url>
    
    <content type="html"><![CDATA[<p>我们在mac下面用终端连接远程服务器, 如果长时间不操作, 会发现连接会断开, 所以不得不重新连接, 很多时候我们不希望出现这种情况, 这个时候可以在服务器或者客户端设置<br>mac客户端设置  </p><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 打开</span><br><span class="line">vi ~/.ssh/config</span><br><span class="line"># 添加, 60s向服务端请求一次</span><br><span class="line">ServerAliveInterval = 60</span><br><span class="line"># 设置文件权限</span><br><span class="line">chmod 600 ~/.ssh/config</span><br></pre></td></tr></tbody></table><blockquote><p>切记, 权限一定要设置否则没有效果</p></blockquote><p>Linux服务器设置  </p><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 打开(服务端是文件 sshd_config)</span><br><span class="line">vi /etc/ssh/sshd_config</span><br><span class="line"># 添加</span><br><span class="line">ClientAliveInterval 60</span><br><span class="line">ClientAliveCountMax 1</span><br></pre></td></tr></tbody></table><blockquote><p>SSH Server 每 60 秒就会自动发送一个信号给 Client，而等待 Client 回应</p></blockquote>]]></content>
    
    
    
    <tags>
      
      <tag>工具</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>「Javascript」TS入门-hello-world</title>
    <link href="/2023/07/27/%E3%80%8CJavaScript%E3%80%8DTS%E5%85%A5%E9%97%A8-hello-world/"/>
    <url>/2023/07/27/%E3%80%8CJavaScript%E3%80%8DTS%E5%85%A5%E9%97%A8-hello-world/</url>
    
    <content type="html"><![CDATA[<h3 id="一、简介"><a href="#一、简介" class="headerlink" title="一、简介"></a><a href="#%E4%B8%80%E3%80%81%E7%AE%80%E4%BB%8B" title="一、简介"></a>一、简介</h3><p>TypeScript是微软开发的开源编程语言，它是Javascript的超集。  </p><h3 id="二、开发环境"><a href="#二、开发环境" class="headerlink" title="二、开发环境"></a><a href="#%E4%BA%8C%E3%80%81%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83" title="二、开发环境"></a>二、开发环境</h3><p>1.安装node.js，TypeScript需要编译成Javascript才能运行，Node.js提供了编译环境。</p><p>2.安装TypeScript编译工具，打开cmd，输入npm命令：</p><pre><code class="hljs">&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;npm install -g typescript&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;</code></pre><p>安装成功如图：<br><img src="/2023/07/27/%E3%80%8CJavaScript%E3%80%8DTS%E5%85%A5%E9%97%A8-hello-world/2019010101.png" alt="Typescript安装"></p><p>如果安装的过程中出现以下错误<br><img src="/2023/07/27/%E3%80%8CJavaScript%E3%80%8DTS%E5%85%A5%E9%97%A8-hello-world/2019010102.png" alt="Typescript安装"></p><p>请执行以下命令，将npm镜像地址切换到国内</p><p>npm –registry <a href="http://registry.cnpmjs.org/">http://registry.cnpmjs.org</a></p><h3 id="三、Hello-World"><a href="#三、Hello-World" class="headerlink" title="三、Hello World"></a><a href="#%E4%B8%89%E3%80%81Hello-World" title="三、Hello World"></a>三、Hello World</h3><p>新建文件Hello.ts，用记事本打开，并输入以下代码：  </p><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">function hello(){</span><br><span class="line">return 'Hello World'</span><br><span class="line">}</span><br><span class="line">console.log(hello());</span><br></pre></td></tr></tbody></table><p>这段代码将在console中输出Hello World</p><p>ts文件为TypeScipt的后缀名，我们需要将TypeScript编译成Js，在命令行中输入以下命令执行编译:  </p><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tsc hello.ts</span><br></pre></td></tr></tbody></table><p>命令执行后会在同目录生成Hello.js，为TypeScript编译文件</p><p>我们用Node.js运行该js文件，如图：<br><img src="/2023/07/27/%E3%80%8CJavaScript%E3%80%8DTS%E5%85%A5%E9%97%A8-hello-world/2019010103.png" alt="Typescript运行"></p><p>一个简单的Hello World程序就出来了</p>]]></content>
    
    
    
    <tags>
      
      <tag>JavaScript</tag>
      
      <tag>前端</tag>
      
      <tag>TypeScript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>「工具」终端之美-目录相关的命令</title>
    <link href="/2023/07/27/%E3%80%8C%E5%B7%A5%E5%85%B7%E3%80%8D%E7%BB%88%E7%AB%AF%E4%B9%8B%E7%BE%8E-%E7%9B%AE%E5%BD%95%E7%9B%B8%E5%85%B3%E7%9A%84%E5%91%BD%E4%BB%A4/"/>
    <url>/2023/07/27/%E3%80%8C%E5%B7%A5%E5%85%B7%E3%80%8D%E7%BB%88%E7%AB%AF%E4%B9%8B%E7%BE%8E-%E7%9B%AE%E5%BD%95%E7%9B%B8%E5%85%B3%E7%9A%84%E5%91%BD%E4%BB%A4/</url>
    
    <content type="html"><![CDATA[<h3 id="cd-切换用户当前目录"><a href="#cd-切换用户当前目录" class="headerlink" title="cd 切换用户当前目录"></a><a href="#cd-%E5%88%87%E6%8D%A2%E7%94%A8%E6%88%B7%E5%BD%93%E5%89%8D%E7%9B%AE%E5%BD%95" title="cd 切换用户当前目录"></a>cd 切换用户当前目录</h3><p>用来切换用户当前目录当指定目录，这个指定目录可以是相对路径也可以是绝对路径<br>一些常用的特殊符号：</p><ul><li>~ 用户主目录</li><li>. 当前目录</li><li>.. 上一级目录</li></ul><p>命令示例：  </p><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cd ~ //切换到用户主目录</span><br><span class="line">cd /home //进入home目录</span><br><span class="line">cd ../ //进入上一级目录</span><br><span class="line">cd ../code //进入上一级目录下的code目录</span><br></pre></td></tr></tbody></table><h3 id="ls-显示指定目录下的文件和文件夹"><a href="#ls-显示指定目录下的文件和文件夹" class="headerlink" title="ls 显示指定目录下的文件和文件夹"></a><a href="#ls-%E6%98%BE%E7%A4%BA%E6%8C%87%E5%AE%9A%E7%9B%AE%E5%BD%95%E4%B8%8B%E7%9A%84%E6%96%87%E4%BB%B6%E5%92%8C%E6%96%87%E4%BB%B6%E5%A4%B9" title="ls 显示指定目录下的文件和文件夹"></a>ls 显示指定目录下的文件和文件夹</h3><p>用来查看当前目录或指定目录下的有那些文件和文件夹<br>一些常用参数：</p><ul><li>-a 显示全部文件</li><li>-l 所有信息用单列显示</li><li>-s 显示文件和目录的大小</li><li>-r 以文件名反序排列并输出目录内容列表</li></ul><p>命令示例：  </p><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ls -a //列出当前文件夹下全部文件，包括隐藏文件</span><br><span class="line">ls -ls //以单列显示文件信息包括文件大小</span><br><span class="line">ls /home //显示home文件夹下的文件</span><br></pre></td></tr></tbody></table><h3 id="pwd-显示用户当前工作路径"><a href="#pwd-显示用户当前工作路径" class="headerlink" title="pwd 显示用户当前工作路径"></a><a href="#pwd-%E6%98%BE%E7%A4%BA%E7%94%A8%E6%88%B7%E5%BD%93%E5%89%8D%E5%B7%A5%E4%BD%9C%E8%B7%AF%E5%BE%84" title="pwd 显示用户当前工作路径"></a>pwd 显示用户当前工作路径</h3><p>用来显示用户当前的工作路径的 ，以绝对路径的形式呈现的<br>命令示例：  </p><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pwd  ///home/liguifa/codes</span><br></pre></td></tr></tbody></table><h3 id="mkdir-创建文件夹"><a href="#mkdir-创建文件夹" class="headerlink" title="mkdir 创建文件夹"></a><a href="#mkdir-%E5%88%9B%E5%BB%BA%E6%96%87%E4%BB%B6%E5%A4%B9" title="mkdir 创建文件夹"></a>mkdir 创建文件夹</h3><p>用来创建文件夹，如果没有指定路径则在当前目录下创建<br>命令示例：  </p><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mkdir test1 //在当前目录下目录下创建名为test1的文件夹</span><br><span class="line">mkdir ../test2 //在上一级目录下创建名为test2的文件夹</span><br><span class="line">mkdir /home/test3 //在home目录下创建名为test3的文件夹</span><br></pre></td></tr></tbody></table><h3 id="rm-删除文件或文件夹"><a href="#rm-删除文件或文件夹" class="headerlink" title="rm 删除文件或文件夹"></a><a href="#rm-%E5%88%A0%E9%99%A4%E6%96%87%E4%BB%B6%E6%88%96%E6%96%87%E4%BB%B6%E5%A4%B9" title="rm 删除文件或文件夹"></a>rm 删除文件或文件夹</h3><p>用于删除文件或文件夹，如果不指定-r参数，则为删除文件<br>一些常用参数：</p><ul><li>-r 删除文件夹</li><li>-f 强制删除</li><li>-v 显示删除过程</li></ul><p>命令示例：  </p><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">rm test.zip //删除当前目录下的test.zip文件</span><br><span class="line">rm ../test.zip //删除上一级目录下的test.zip文件夹</span><br><span class="line">rm -rfv /home/codes //强制删除home文件夹下的codes文件夹，并显示删除过程</span><br></pre></td></tr></tbody></table><h3 id="mv-移动文件或文件夹"><a href="#mv-移动文件或文件夹" class="headerlink" title="mv 移动文件或文件夹"></a><a href="#mv-%E7%A7%BB%E5%8A%A8%E6%96%87%E4%BB%B6%E6%88%96%E6%96%87%E4%BB%B6%E5%A4%B9" title="mv 移动文件或文件夹"></a>mv 移动文件或文件夹</h3><p>用于移动文件或文件夹，指定-f参数，为移动文件夹，如果在目标位置和源位置相同则为重命名<br>一些常用参数：</p><ul><li>-r 移动文件夹</li><li>-f 强制移动</li><li>-v 显示删除过程</li></ul><p>命令示例：  </p><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mv ../1.zip ../2.zip //重命名上一级目录下的1.zip为2.zip</span><br><span class="line">mv ../3.zip ../../4.zip //将上一级的3.zip移动到上上一级并修改名称为4.zip</span><br><span class="line">mv /home/5.zip ~/ //移动home目录下的5.zip到用户主目录下</span><br><span class="line">mv -r /home/codes ~/ //移动home目录下的codes文件到用户主目录下</span><br></pre></td></tr></tbody></table><h3 id="cp-复制文件或文件夹"><a href="#cp-复制文件或文件夹" class="headerlink" title="cp 复制文件或文件夹"></a><a href="#cp-%E5%A4%8D%E5%88%B6%E6%96%87%E4%BB%B6%E6%88%96%E6%96%87%E4%BB%B6%E5%A4%B9" title="cp 复制文件或文件夹"></a>cp 复制文件或文件夹</h3><p>用来将一个或多个源文件或者目录复制到指定的目的文件或目录<br>一些常用参数：</p><ul><li>-r 复制文件夹</li><li>-f 强制复制</li><li>-v 显示复制过程</li></ul><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cp 1.zip ../ //复制当前目录下的1.zip到上一级目录下</span><br><span class="line">cp -r test /home //复制当前目录下的test文件夹到上一级目录</span><br></pre></td></tr></tbody></table><h3 id="scp-远程复制文件或文件夹"><a href="#scp-远程复制文件或文件夹" class="headerlink" title="scp 远程复制文件或文件夹"></a><a href="#scp-%E8%BF%9C%E7%A8%8B%E5%A4%8D%E5%88%B6%E6%96%87%E4%BB%B6%E6%88%96%E6%96%87%E4%BB%B6%E5%A4%B9" title="scp 远程复制文件或文件夹"></a>scp 远程复制文件或文件夹</h3><p>用于在两台主机之间复制文件或文件夹<br>一些常用参数：</p><ul><li>-r 复制文件夹</li><li>-f 强制复制</li><li>-v 显示复制过程</li></ul><p>命令示例：  </p><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">scp ./2.zip liguifa@192.168.112.15:/home/iknow/ //将当前目录下的2.zip复制到192.168.112.15这台主机下的home/iknow文件夹下</span><br><span class="line">scp -r liguifa@192.168.112.15:/home/codes ./ //将192.168.112.15这台主机下的home/codes文件夹复制到当前目录下</span><br><span class="line">/* 远程机器路径：用户名@ip:目录 */</span><br></pre></td></tr></tbody></table><h3 id="tree-列出目录内容"><a href="#tree-列出目录内容" class="headerlink" title="tree 列出目录内容"></a><a href="#tree-%E5%88%97%E5%87%BA%E7%9B%AE%E5%BD%95%E5%86%85%E5%AE%B9" title="tree 列出目录内容"></a>tree 列出目录内容</h3><p>用于以树状图列出目录的内容<br>该命令需要执行安装  </p><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">brew install tree //Mac安装</span><br><span class="line">yum install tree //center os安装</span><br><span class="line">apt-get install tree //ubuntu安装</span><br></pre></td></tr></tbody></table><p>一些常用参数：</p><ul><li>-F 文件夹后面加上&#x2F;</li><li>-C 彩色输出</li></ul><p>命令示例：  </p><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">tree ./public //列出public下的结构</span><br><span class="line">tree ./ | grep 04 //列出当前目录的结构并执行搜索</span><br></pre></td></tr></tbody></table><p><img src="/2023/07/27/%E3%80%8C%E5%B7%A5%E5%85%B7%E3%80%8D%E7%BB%88%E7%AB%AF%E4%B9%8B%E7%BE%8E-%E7%9B%AE%E5%BD%95%E7%9B%B8%E5%85%B3%E7%9A%84%E5%91%BD%E4%BB%A4/2018122201.jpg" alt="tree 命令"></p>]]></content>
    
    
    
    <tags>
      
      <tag>工具</tag>
      
      <tag>终端</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>「工具」Homebrew安装</title>
    <link href="/2023/07/27/%E3%80%8C%E5%B7%A5%E5%85%B7%E3%80%8DHomebrew%E5%AE%89%E8%A3%85/"/>
    <url>/2023/07/27/%E3%80%8C%E5%B7%A5%E5%85%B7%E3%80%8DHomebrew%E5%AE%89%E8%A3%85/</url>
    
    <content type="html"><![CDATA[<h3 id="脚步安装"><a href="#脚步安装" class="headerlink" title="脚步安装"></a><a href="#%E8%84%9A%E6%9C%AC%E5%AE%89%E8%A3%85" title="脚本安装"></a>脚步安装</h3><p>在命令行中输入并执行  </p><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/bin/ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"</span><br></pre></td></tr></tbody></table><p>出现下面显示，按回车<br><img src="/2023/07/27/%E3%80%8C%E5%B7%A5%E5%85%B7%E3%80%8DHomebrew%E5%AE%89%E8%A3%85/2018121901.jpg" alt="brew 安装"><br>之后出现下图表示安装成功<br><img src="/2023/07/27/%E3%80%8C%E5%B7%A5%E5%85%B7%E3%80%8DHomebrew%E5%AE%89%E8%A3%85/2018121902.jpg" alt="brew 安装"></p><h3 id="测试安装"><a href="#测试安装" class="headerlink" title="测试安装"></a><a href="#%E6%B5%8B%E8%AF%95%E5%AE%89%E8%A3%85" title="测试安装"></a>测试安装</h3><p>在命令行中输入并执行  </p><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew help</span><br></pre></td></tr></tbody></table><p>出现下图表示brew无误<br><img src="/2023/07/27/%E3%80%8C%E5%B7%A5%E5%85%B7%E3%80%8DHomebrew%E5%AE%89%E8%A3%85/2018121903.jpg" alt="brew 安装"></p>]]></content>
    
    
    
    <tags>
      
      <tag>工具</tag>
      
      <tag>Linux</tag>
      
      <tag>Homebrew</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>「工具」Chrome-devtool使用指南</title>
    <link href="/2023/07/27/%E3%80%8C%E5%B7%A5%E5%85%B7%E3%80%8DChrome-devtool%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/"/>
    <url>/2023/07/27/%E3%80%8C%E5%B7%A5%E5%85%B7%E3%80%8DChrome-devtool%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/</url>
    
    <content type="html"><![CDATA[<p>在这篇文章中，我们会用Performance工具去分析一个现有的在线DEMO，然后教会你怎么去分析，从而找到性能瓶颈。</p><p>1.打开Chrome的匿名模式。匿名模式可以保证Chrome在一个相对干净的环境下运行。比如说，你安装了许多chrome插件，这些插件可能会影响我们分析性能表现。<br>2.在匿名模式下打开右边这个链接，DEMO，这个网页就是我们要用来分析的DEMO。这个页面里都是很多上下移动的蓝色小方块。<br>3.按下Command+Opiton+I（Mac）或者Control+shift+I (Windows, Linux) 来打开Devtools <img src="/2023/07/27/%E3%80%8C%E5%B7%A5%E5%85%B7%E3%80%8DChrome-devtool%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/2018121801.png" alt="Alt text"></p><h3 id="模拟移动设备的CPU"><a href="#模拟移动设备的CPU" class="headerlink" title="模拟移动设备的CPU"></a><a href="#%E6%A8%A1%E6%8B%9F%E7%A7%BB%E5%8A%A8%E8%AE%BE%E5%A4%87%E7%9A%84CPU" title="模拟移动设备的CPU"></a>模拟移动设备的CPU</h3><p>移动设备的CPU一般比台式机和笔记本弱很多。当你想分析页面的时候，可以用CPU控制器（CPU Throttling）来模拟移动端设备CPU。</p><p>1.在DevTools中，点击 Performance 的 tab。<br>2.确保 Screenshots checkbox 被选中<br>3.点击 Capture Settings（⚙️）按钮，DevTools会展示很多设置，来模拟各种状况<br>4.对于模拟CPU，选择2x slowdown，于是Devtools就开始模拟两倍低速CPU<br><img src="/2023/07/27/%E3%80%8C%E5%B7%A5%E5%85%B7%E3%80%8DChrome-devtool%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/2018121802.png" alt="Alt text"></p><h3 id="设置DEMO"><a href="#设置DEMO" class="headerlink" title="设置DEMO"></a><a href="#%E8%AE%BE%E7%BD%AEDEMO" title="设置DEMO"></a>设置DEMO</h3><p>为了使得这个DEMO有相对统一的运行表现（不同的读者，机器的性能千差万别）。这个DEMO提供了自定义功能，用来确保这个DEMO的统一表现。</p><p>1.一直点击 Add 10 这个按钮直到你能很明显看到蓝色小方块移动变慢，在性能比较好的机器上，大概要点击20次左右。<br>2.点击 Optimize按钮，你会发现蓝色小方块会变的很快而且动画变得平滑。<br>3.点击 un-optimize 按钮，蓝色小方块又会变成之前的模样。</p><h3 id="记录运行时性能表现"><a href="#记录运行时性能表现" class="headerlink" title="记录运行时性能表现"></a><a href="#%E8%AE%B0%E5%BD%95%E8%BF%90%E8%A1%8C%E6%97%B6%E6%80%A7%E8%83%BD%E8%A1%A8%E7%8E%B0" title="记录运行时性能表现"></a>记录运行时性能表现</h3><p>在之前的DEMO中，当你运行优化模式的时候，蓝色小方块移动地非常快。为什么呢？明明两个模式都是移动了同样数量的小方块而且移动的时间也一样。那么现在我们在Performance界面下录制下发生的一切，并且学习如何分析这个记录，从而找到非优化模式下的性能瓶颈。</p><p>1.在DevTools中，点击 Record 。这时候Devtools就开始录制各种性能指标<br><img src="/2023/07/27/%E3%80%8C%E5%B7%A5%E5%85%B7%E3%80%8DChrome-devtool%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/2018121803.png" alt="Alt text"><br>2.等待几分钟<br>3.点击Stop按钮，Devtools停止录制，处理数据，然后显示性能报告<br><img src="/2023/07/27/%E3%80%8C%E5%B7%A5%E5%85%B7%E3%80%8DChrome-devtool%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/2018121804.png" alt="Alt text"><br>wow，看起来有非常多的数据，别害怕，我们一个一个来介绍</p><h4 id="分析报告"><a href="#分析报告" class="headerlink" title="分析报告"></a><a href="#%E5%88%86%E6%9E%90%E6%8A%A5%E5%91%8A" title="分析报告"></a>分析报告</h4><p>一旦你得到了页面的性能表现报告，那么就可以用它来分析页面的性能，从而找到性能瓶颈。<br>分析每一秒的帧</p><p>FPS（frames per second）是用来分析动画的一个主要性能指标。能保持在60的FPS的话，那么用户体验就是不错的。</p><p>1.观察FPS图表，如果你发现了一个红色的长条，那么就说明这些帧存在严重问题，有可能导致非常差的用户体验。一般来说，绿色的长条越高，说明FPS越高，用户体验越好。<br><img src="/2023/07/27/%E3%80%8C%E5%B7%A5%E5%85%B7%E3%80%8DChrome-devtool%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/2018121805.png" alt="Alt text"><br>2.就在FPS图表下方，你会看到CPU图表。在CPU图表中的各种颜色与Summary面板里的颜色是相互对应的，Summary面板就在Performance面板的下方。CPU图表中的各种颜色代表着在这个时间段内，CPU在各种处理上所花费的时间。如果你看到了某个处理占用了大量的时间，那么这可能就是一个可以找到性能瓶颈的线索。<br><img src="/2023/07/27/%E3%80%8C%E5%B7%A5%E5%85%B7%E3%80%8DChrome-devtool%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/2018121806.png" alt="Alt text"><br>3.把鼠标移动到FPS，CPU或者NET图表之上，DevToos就会展示这个时间点界面的截图。左右移动鼠标，可以重发当时的屏幕录像。这被称为scrubbing, 他可以用来分析动画的各个细节。<br><img src="/2023/07/27/%E3%80%8C%E5%B7%A5%E5%85%B7%E3%80%8DChrome-devtool%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/2018121807.png" alt="Alt text"><br>4.在Frames图表中，把鼠标移动到绿色条状图上，Devtools会展示这个帧的FPS。每个帧可能都在60以下，都没有达到60的标准。<br><img src="/2023/07/27/%E3%80%8C%E5%B7%A5%E5%85%B7%E3%80%8DChrome-devtool%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/2018121808.png" alt="Alt text"><br>当然这个对于DEMO，可以相当容易观察到性能的问题。但是在现实使用场景下，就不是那么容易观察到了。所以要把常常使用这些工具来分析页面。<br>小功能：显示实时FPS面板<br>另外一个好用的小工具就是实时FPS面板，它可以实时展示页面的FPS指标<br>5.按下 Command+Shift+P（Mac）或者 Control+Shift+P(Windows, Linux) 打开命令菜单<br>6.输入Rendering，点选Show Rendering<br>7.在Rendering面板里，激活FPS Meter。FPS实时面板就出现在页面的右上方。<br><img src="/2023/07/27/%E3%80%8C%E5%B7%A5%E5%85%B7%E3%80%8DChrome-devtool%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/2018121809.png" alt="Alt text"><br>8.关闭FPS Meter只要按下Escape就可以了。这篇指南里暂时用不上这个功能。</p><h4 id="定位瓶颈"><a href="#定位瓶颈" class="headerlink" title="定位瓶颈"></a><a href="#%E5%AE%9A%E4%BD%8D%E7%93%B6%E9%A2%88" title="定位瓶颈"></a>定位瓶颈</h4><p>现在已经确定到这个页面的动画性能表现不太好，那么下一步就是找到为什么</p><p>1.注意Summary面板，你会发现CPU花费了大量的时间在rendering上。因为提高性能就是一门做减法的艺术，你的目标就是减少rendering的时间<br><img src="/2023/07/27/%E3%80%8C%E5%B7%A5%E5%85%B7%E3%80%8DChrome-devtool%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/2018121810.png" alt="Alt text"><br>2.展开Main图表，Devtools展示了主线程运行状况。X轴代表着时间。每个长条代表着一个event。长条越长就代表这个event花费的时间越长。Y轴代表了调用栈（call stack）。在栈里，上面的event调用了下面的event。<br><img src="/2023/07/27/%E3%80%8C%E5%B7%A5%E5%85%B7%E3%80%8DChrome-devtool%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/2018121811.png" alt="Alt text"><br>3.在性能报告中，有很多的数据。可以通过双击，拖动等等动作来放大缩小报告范围，从各种时间段来观察分析报告。<br><img src="/2023/07/27/%E3%80%8C%E5%B7%A5%E5%85%B7%E3%80%8DChrome-devtool%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/2018121812.png" alt="Alt text"><br>4.在事件长条的右上角出，如果出现了红色小三角，说明这个事件是存在问题的，需要特别注意。<br>5.双击这个带有红色小三角的的事件。在Summary面板会看到详细信息。注意reveal这个链接，双击它会让高亮触发这个事件的event。如果点击了app.js:94这个链接，就会跳转到对应的代码处。<br><img src="/2023/07/27/%E3%80%8C%E5%B7%A5%E5%85%B7%E3%80%8DChrome-devtool%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/2018121813.png" alt="Alt text"><br>6.在app.update这个事件的长条下方，有很多被触发的紫色长条。如果放大这些事件长条，你会看到它们每个都带有红色小三角。点击其中一个紫色事件长条，Devtools在Summary面板里展示了更多关于这个事件的信息。确实，这里有很多reflow的警告。<br>7.在summary面板里点击app.js:70链接，Devtools会跳转到需要优化的代码处<br><img src="/2023/07/27/%E3%80%8C%E5%B7%A5%E5%85%B7%E3%80%8DChrome-devtool%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/2018121814.png" alt="Alt text"><br>OK！Devtools里面还有很多很多指标需要你去探索，但是，对于怎么用Devtools去分析网页的运行时性能表现，你现在已经有了一个基本的概念。</p>]]></content>
    
    
    
    <tags>
      
      <tag>前端</tag>
      
      <tag>工具</tag>
      
      <tag>Chrome</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>「Redis」Redis常用命令</title>
    <link href="/2023/07/27/%E3%80%8CRedis%E3%80%8DRedis%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
    <url>/2023/07/27/%E3%80%8CRedis%E3%80%8DRedis%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
    
    <content type="html"><![CDATA[<table><thead><tr><th>#</th><th>命令</th><th>参数</th><th>例子</th><th>功能</th><th>返回值</th><th>原理</th></tr></thead><tbody><tr><td>1</td><td>keys</td><td>pattern: 键名配置模式</td><td>keys *</td><td>输出所有键</td><td>返回键列表</td><td>遍历所有键，和输入的模式做匹配，时间复杂度为O(n)，当Redis保存大量键时，线上环境禁止使用</td></tr><tr><td>2</td><td>dbsize</td><td></td><td>dbsize</td><td>获取键总数</td><td>返回键总数</td><td>直接获取Redis内置键总数变量，时间复杂度为O(1)</td></tr><tr><td>3</td><td>exists</td><td>key: 键名</td><td>exists key</td><td>检查键是否存在</td><td>1：键存在 0：键不存在</td><td></td></tr><tr><td>4</td><td>del</td><td>key: 键名列表</td><td>del key1 key2</td><td>删除键</td><td>1：删除成功 0：键不存在</td><td></td></tr><tr><td>5</td><td>expire</td><td>key: 键名 seconds:过期时间</td><td>expire key1 10</td><td>键过期</td><td>1：设置成功 0：键不存在</td><td></td></tr><tr><td>6</td><td>ttl</td><td>key:键名</td><td>ttl key1</td><td>获取剩余过期时间</td><td>&gt;&#x3D;0：键剩余的过期时间 -1：键没有设置过期时间 -2：键不存在</td><td></td></tr><tr><td>7</td><td>type</td><td>key: 键名</td><td>type key1</td><td>获取键的数据类型</td><td>返回键类型 如果键不存在则返回none</td><td></td></tr><tr><td>8</td><td>set</td><td>key: 键名 value: 值</td><td>set name hello</td><td>设置键</td><td></td><td></td></tr><tr><td>9</td><td>get</td><td>key:键名</td><td>get name</td><td>获取键值</td><td>键值</td><td></td></tr></tbody></table>]]></content>
    
    
    
    <tags>
      
      <tag>Redis</tag>
      
      <tag>数据库</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>「JavaScript」JavaScript作用域</title>
    <link href="/2023/07/27/%E3%80%8CJavaScript%E3%80%8DJavaScript%E4%BD%9C%E7%94%A8%E5%9F%9F/"/>
    <url>/2023/07/27/%E3%80%8CJavaScript%E3%80%8DJavaScript%E4%BD%9C%E7%94%A8%E5%9F%9F/</url>
    
    <content type="html"><![CDATA[<p>JaveScript 是Web前端开发的最重要的语言，在JavaScript中作用域是一个重要的基础知识点。  </p><p>在JavaScript中共有三种作用域，分别是全局作用域、函数左右域和块级作用域。  </p><p>本文会先对三种作用域做介绍，之后举一个常见的例子做整体介绍。  </p><h4 id="1、全局作用域"><a href="#1、全局作用域" class="headerlink" title="1、全局作用域"></a><a href="#1%E3%80%81%E5%85%A8%E5%B1%80%E4%BD%9C%E7%94%A8%E5%9F%9F" title="1、全局作用域"></a>1、全局作用域</h4><p>全局作用域，故名思议，全局作用域就是整个JavaScript代码范围。如下代码所示:</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-keyword">var</span> a = <span class="hljs-string">&quot;Hello&quot;</span>;  <br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(a);  <span class="hljs-comment">//Hello  </span><br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> i in a)&#123;  <br>    <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(a[i]); <span class="hljs-comment">//H、e、l、l、o  </span><br>&#125;  <br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(i);  <span class="hljs-comment">// 4  </span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">func</span>(<span class="hljs-params"></span>)&#123;  <br>    <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(a); <span class="hljs-comment">//Hello  </span><br>    <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(i) <span class="hljs-comment">// 4  </span><br>&#125;  <br>func();<br></code></pre></td></tr></table></figure><p>在这段代码中，我们先声明了变量a，并对a赋值Hello，a是我们在全局上声明的变量，此时a的作用域为全局作用域，我们之后在直接输出、循环中输出、函数中输出都没有错误，说明此时a在任何位置均可以访问。同时在for循环中我们声明了变量i，for循环结束之后变量i并没有释放，而是输出了最后的值4，说明此时变量i的作用域为全局作用域。</p><h3 id="2、函数作用域"><a href="#2、函数作用域" class="headerlink" title="2、函数作用域"></a><a href="#2%E3%80%81%E5%87%BD%E6%95%B0%E4%BD%9C%E7%94%A8%E5%9F%9F" title="2、函数作用域"></a>2、函数作用域</h3><p>函数作用域，故名思议，函数作用域就是生个函数范围。如下代码所示:</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-keyword">function</span> <span class="hljs-title function_">fun</span>(<span class="hljs-params"></span>) &#123;  <br>   <span class="hljs-keyword">var</span> a = <span class="hljs-string">&quot;Hello&quot;</span>;  <br>   <span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>;  <br>   switch (i) &#123;  <br>           case <span class="hljs-number">0</span>: <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(a); <span class="hljs-comment">//hello  </span><br>    &#125;  <br>    <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(a); <span class="hljs-comment">//hello  </span><br>&#125;  <br>func();  <br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(a); <span class="hljs-comment">//Error  </span><br><span class="hljs-keyword">var</span> t = <span class="hljs-string">&quot;hello2&quot;</span>;  <br><span class="hljs-keyword">function</span> <span class="hljs-title function_">fun2</span>(<span class="hljs-params"></span>) &#123;  <br>    <span class="hljs-keyword">var</span> t = <span class="hljs-string">&quot;helllo3&quot;</span>;  <br>    <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(t); <span class="hljs-comment">//hello3  </span><br>&#125;  <br><br></code></pre></td></tr></table></figure><p>在这段代码中，我们先声明了函数fun，在函数内部我们声明了变量a，此时a的作用域为函数作用域，之后我们在switch中输出，尽管我们的switch被大括号包裹，但是我们依然可以访问，说明函数作用域可以在函数的任意位置范围，之后在函数之外，我们输出变量a，此时就会出错，因为变量a的作用域为函数作用域，在函数为无法访问。在fun2中，我们声明了一个与全局变量同名的变量t，此时函数作用域中的t为覆盖全局作用域的t，这里的规则是子作用域覆盖父作用域，而全局作用域做为所有作用域的顶层作用域，一定会被子作用域的同名变量覆盖。</p><h3 id="3、块级作用域"><a href="#3、块级作用域" class="headerlink" title="3、块级作用域"></a><a href="#3%E3%80%81%E5%9D%97%E7%BA%A7%E4%BD%9C%E7%94%A8%E5%9F%9F" title="3、块级作用域"></a>3、块级作用域</h3><p>在ES6中，JavaScript引入了块级作用域，块级作用域的作用域范围为代码块。如下代码所示：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-meta">&quot;use strict&quot;</span>  <br>&#123;      <br>    <span class="hljs-keyword">var</span> a = <span class="hljs-number">0</span>;  <br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(a);  <br>&#125;  <br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(a) <span class="hljs-comment">//Error</span><br></code></pre></td></tr></table></figure><p>在上面代码中，我们使用use strict启用ES6，此时块级作用域起效，在之后的代码块中，变量a为块级作用域，在代码中访问正常，而在代码我们无法访问，与函数作用域类似，我们依然可以访问父作用域的变量，当发生变量重名是会覆盖父作用域的变量。</p><h3 id="4、例子"><a href="#4、例子" class="headerlink" title="4、例子"></a><a href="#4%E3%80%81%E4%BE%8B%E5%AD%90" title="4、例子"></a>4、例子</h3><p>与作用域相关的问题中，大多出在for中，如下代码所示：</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-keyword">var</span> funcs = [];  <br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>;i&lt;<span class="hljs-number">4</span>;i++) &#123;  <br>    funcs.<span class="hljs-built_in">push</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;  <br>        <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(i);  <br>    &#125;);  <br>&#125;  <br>funcs.forEach(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;  <br>    fun();  <br>&#125;);  <br><br></code></pre></td></tr></table></figure><p>我们执行这段代码，此时我们期望输出0、1、2、3，但是在实际运行时，我们输出了4、4、4、4，这是因为var声明的变量只能是全局作用域或函数作用域，如果我们这段代码运行在全局作用域的，那么变量i的作用域就是全局作用域，在整个作用域中变量i只有一个值，也就是在funs中我们引用的变量i和全局作用域的i是同一个并且只有一个，当循环结束后，变量的值变成了4，我们在执行funs，那么输出的就是变量i的值4。那么很明显这个问题是作用域没有独立引起的，解决办法就是新建一样作用域。</p><h4 id="4-1-方法1"><a href="#4-1-方法1" class="headerlink" title="4.1 方法1"></a><a href="#4-1-%E6%96%B9%E6%B3%951" title="4.1 方法1"></a>4.1 方法1</h4><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-keyword">var</span> funcs = [];<span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">4</span>; i++) &#123;  <br>    funcs.<span class="hljs-built_in">push</span>((<span class="hljs-keyword">function</span> (<span class="hljs-params">in_i</span>) &#123;  <br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;  <br>            <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(in_i);  <br>        &#125;  <br>    &#125;)(i));  <br>&#125;  <br>funcs.forEach(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;  <br>    fun();  <br>&#125;);<br></code></pre></td></tr></table></figure><p>如上面的代码所示，我们使用闭包，闭包就是一个立即执行的函数，此时我们使用闭包新建了一个函数作用域，并把变量i参入，在闭包内部会拷贝一份变量i到in_i，此时for内部不再是单一作用域，做个作用域有多个in_i。</p><h4 id="4-2-方法2"><a href="#4-2-方法2" class="headerlink" title="4.2 方法2"></a><a href="#4-2-%E6%96%B9%E6%B3%952" title="4.2 方法2"></a>4.2 方法2</h4><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-keyword">var</span> funcs = [];<span class="hljs-keyword">for</span>(let i = <span class="hljs-number">0</span>;i&lt;<span class="hljs-number">4</span>;i++) &#123;  <br>    funcs.<span class="hljs-built_in">push</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;  <br>        <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(i);  <br>    &#125;);  <br>&#125;  <br>funcs.forEach(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;  <br>    fun();  <br>&#125;);<br></code></pre></td></tr></table></figure><p>如上代码所示，我们将var替换成了let，let是ES6声明变量的方法，此时let声明后i变成了块级作用域变量，也就是新建了一个块级作用域，在for内部i不再是同一个，而是在一个作用域中一个变量i。</p>]]></content>
    
    
    
    <tags>
      
      <tag>JavaScript</tag>
      
      <tag>前端</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>「Hadoop」Hadoop常用命令</title>
    <link href="/2023/07/27/%E3%80%8CHadoop%E3%80%8DHadoop%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
    <url>/2023/07/27/%E3%80%8CHadoop%E3%80%8DHadoop%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
    
    <content type="html"><![CDATA[<h3 id="FS-Shell"><a href="#FS-Shell" class="headerlink" title="FS Shell"></a><a href="#FS-Shell" title="FS Shell"></a>FS Shell</h3><p>调用文件系统(FS)Shell命令应使用 bin&#x2F;hadoop fs 的形式。 所有的的FS shell命令使用URI路径作为参数。URI格式是scheme:&#x2F;&#x2F;authority&#x2F;path。对HDFS文件系统，scheme是hdfs，对本地文件系统，scheme是file。其中scheme和authority参数都是可选的，如果未加指定，就会使用配置中指定的默认scheme。一个HDFS文件或目录比如&#x2F;parent&#x2F;child可以表示成hdfs:&#x2F;&#x2F;namenode:namenodeport&#x2F;parent&#x2F;child，或者更简单的&#x2F;parent&#x2F;child（假设你配置文件中的默认值是namenode:namenodeport）。大多数FS Shell命令的行为和对应的Unix Shell命令类似，不同之处会在下面介绍各命令使用详情时指出。出错信息会输出到stderr，其他信息输出到stdout。  </p><h5 id="cat"><a href="#cat" class="headerlink" title="cat"></a><a href="#cat" title="cat"></a>cat</h5><p>使用方法：hadoop fs -cat URI [URI …]<br>将路径指定文件的内容输出到stdout。<br>示例：</p><ul><li>hadoop fs -cat hdfs:&#x2F;&#x2F;host1:port1&#x2F;file1 hdfs:&#x2F;&#x2F;host2:port2&#x2F;file2</li><li>hadoop fs -cat file:&#x2F;&#x2F;&#x2F;file3 &#x2F;user&#x2F;hadoop&#x2F;file4<br>返回值：成功返回0，失败返回-1。</li></ul><h5 id="chgrp"><a href="#chgrp" class="headerlink" title="chgrp"></a><a href="#chgrp" title="chgrp"></a>chgrp</h5><p>使用方法：hadoop fs -chgrp [-R] GROUP URI [URI …] Change group association of files. With -R, make the change recursively through the directory structure. The user must be the owner of files, or else a super-user. Additional information is in the Permissions User Guide. –&gt;<br>改变文件所属的组。使用-R将使改变在目录结构下递归进行。命令的使用者必须是文件的所有者或者超级用户。更多的信息请参见HDFS权限用户指南。</p><h5 id="chmod"><a href="#chmod" class="headerlink" title="chmod"></a><a href="#chmod" title="chmod"></a>chmod</h5><p>使用方法：hadoop fs -chmod [-R] &lt;MODE[,MODE]… | OCTALMODE&gt; URI [URI …]<br>改变文件的权限。使用-R将使改变在目录结构下递归进行。命令的使用者必须是文件的所有者或者超级用户。更多的信息请参见HDFS权限用户指南。</p><h6 id="chown"><a href="#chown" class="headerlink" title="chown"></a><a href="#chown" title="chown"></a>chown</h6><p>使用方法：hadoop fs -chown [-R] [OWNER][:[GROUP]] URI [URI ]<br>改变文件的拥有者。使用-R将使改变在目录结构下递归进行。命令的使用者必须是超级用户。更多的信息请参见HDFS权限用户指南。</p><h5 id="copyFromLocal"><a href="#copyFromLocal" class="headerlink" title="copyFromLocal"></a><a href="#copyFromLocal" title="copyFromLocal"></a>copyFromLocal</h5><p>使用方法：hadoop fs -copyFromLocal URI<br>除了限定源路径是一个本地文件外，和put命令相似。</p><h5 id="copyToLocal"><a href="#copyToLocal" class="headerlink" title="copyToLocal"></a><a href="#copyToLocal" title="copyToLocal"></a>copyToLocal</h5><p>使用方法：hadoop fs -copyToLocal [-ignorecrc] [-crc] URI<br>除了限定目标路径是一个本地文件外，和get命令类似。</p><h5 id="cp"><a href="#cp" class="headerlink" title="cp"></a><a href="#cp" title="cp"></a>cp</h5><p>使用方法：hadoop fs -cp URI [URI …]<br>将文件从源路径复制到目标路径。这个命令允许有多个源路径，此时目标路径必须是一个目录。<br>示例：</p><ul><li>hadoop fs -cp &#x2F;user&#x2F;hadoop&#x2F;file1 &#x2F;user&#x2F;hadoop&#x2F;file2</li><li>hadoop fs -cp &#x2F;user&#x2F;hadoop&#x2F;file1 &#x2F;user&#x2F;hadoop&#x2F;file2 &#x2F;user&#x2F;hadoop&#x2F;dir<br>返回值：成功返回0，失败返回-1。</li></ul><h5 id="du"><a href="#du" class="headerlink" title="du"></a><a href="#du" title="du"></a>du</h5><p>使用方法：hadoop fs -du URI [URI …]<br>显示目录中所有文件的大小，或者当只指定一个文件时，显示此文件的大小。<br>示例：</p><ul><li>hadoop fs -du &#x2F;user&#x2F;hadoop&#x2F;dir1 &#x2F;user&#x2F;*   hadoop&#x2F;file1 hdfs:&#x2F;&#x2F;host:port&#x2F;user&#x2F;hadoop&#x2F;dir1<br>返回值：成功返回0，失败返回-1。</li></ul><h5 id="dus"><a href="#dus" class="headerlink" title="dus"></a><a href="#dus" title="dus"></a>dus</h5><p>使用方法：hadoop fs -dus<br>显示文件的大小。</p><h5 id="expunge"><a href="#expunge" class="headerlink" title="expunge"></a><a href="#expunge" title="expunge"></a>expunge</h5><p>使用方法：hadoop fs -expunge<br>清空回收站。请参考HDFS设计文档以获取更多关于回收站特性的信息。</p><h5 id="get"><a href="#get" class="headerlink" title="get"></a><a href="#get" title="get"></a>get</h5><p>使用方法：hadoop fs -get [-ignorecrc] [-crc]<br>复制文件到本地文件系统。可用-ignorecrc选项复制CRC校验失败的文件。使用-crc选项复制文件以及CRC信息。<br>示例：</p><ul><li>hadoop fs -get &#x2F;user&#x2F;hadoop&#x2F;file localfile</li><li>hadoop fs -get hdfs:&#x2F;&#x2F;host:port&#x2F;user&#x2F;hadoop&#x2F;file localfile<br>返回值：成功返回0，失败返回-1。</li></ul><h5 id="getmerge"><a href="#getmerge" class="headerlink" title="getmerge"></a><a href="#getmerge" title="getmerge"></a>getmerge</h5><p>使用方法：hadoop fs -getmerge [addnl]<br>接受一个源目录和一个目标文件作为输入，并且将源目录中所有的文件连接成本地目标文件。addnl是可选的，用于指定在每个文件结尾添加一个换行符。</p><h5 id="ls"><a href="#ls" class="headerlink" title="ls"></a><a href="#ls" title="ls"></a>ls</h5><p>使用方法：hadoop fs -ls<br>如果是文件，则按照如下格式返回文件信息：<br>文件名 &lt;副本数&gt; 文件大小 修改日期 修改时间 权限 用户ID 组ID<br>如果是目录，则返回它直接子文件的一个列表，就像在Unix中一样。目录返回列表的信息如下：<br>目录名</p><p>修改日期 修改时间 权限 用户ID 组ID<br>示例：</p><ul><li>hadoop fs -ls &#x2F;user&#x2F;hadoop&#x2F;file1 &#x2F;user&#x2F;hadoop&#x2F;file2 hdfs:&#x2F;&#x2F;host:port&#x2F;user&#x2F;hadoop&#x2F;dir1 &#x2F;nonexistentfile<br>返回值：成功返回0，失败返回-1。</li></ul><h5 id="lsr"><a href="#lsr" class="headerlink" title="lsr"></a><a href="#lsr" title="lsr"></a>lsr</h5><p>使用方法：hadoop fs -lsr<br>ls命令的递归版本。类似于Unix中的ls -R。</p><h5 id="mkdir"><a href="#mkdir" class="headerlink" title="mkdir"></a><a href="#mkdir" title="mkdir"></a>mkdir</h5><p>使用方法：hadoop fs -mkdir<br>接受路径指定的uri作为参数，创建这些目录。其行为类似于Unix的mkdir -p，它会创建路径中的各级父目录。<br>示例：</p><ul><li>hadoop fs -mkdir &#x2F;user&#x2F;hadoop&#x2F;dir1 &#x2F;user&#x2F;hadoop&#x2F;dir2</li><li>hadoop fs -mkdir hdfs:&#x2F;&#x2F;host1:port1&#x2F;user&#x2F;hadoop&#x2F;dir hdfs:&#x2F;&#x2F;host2:port2&#x2F;user&#x2F;hadoop&#x2F;dir<br>返回值：成功返回0，失败返回-1。</li></ul><h5 id="movefromLocal"><a href="#movefromLocal" class="headerlink" title="movefromLocal"></a><a href="#movefromLocal" title="movefromLocal"></a>movefromLocal</h5><p>使用方法：dfs -moveFromLocal<br>输出一个”not implemented“信息。</p><h6 id="mv"><a href="#mv" class="headerlink" title="mv"></a><a href="#mv" title="mv"></a>mv</h6><p>使用方法：hadoop fs -mv URI [URI …]<br>将文件从源路径移动到目标路径。这个命令允许有多个源路径，此时目标路径必须是一个目录。不允许在不同的文件系统间移动文件。<br>示例：</p><ul><li>hadoop fs -mv &#x2F;user&#x2F;hadoop&#x2F;file1 &#x2F;user&#x2F;hadoop&#x2F;file2</li><li>hadoop fs -mv hdfs:&#x2F;&#x2F;host:port&#x2F;file1 hdfs:&#x2F;&#x2F;host:port&#x2F;file2 hdfs:&#x2F;&#x2F;host:port&#x2F;file3 hdfs:&#x2F;&#x2F;host:port&#x2F;dir1<br>返回值：成功返回0，失败返回-1。</li></ul><h6 id="put"><a href="#put" class="headerlink" title="put"></a><a href="#put" title="put"></a>put</h6><p>使用方法：hadoop fs -put …<br>从本地文件系统中复制单个或多个源路径到目标文件系统。也支持从标准输入中读取输入写入目标文件系统。</p><ul><li>hadoop fs -put localfile &#x2F;user&#x2F;hadoop&#x2F;hadoopfile</li><li>hadoop fs -put localfile1 localfile2 &#x2F;user&#x2F;hadoop&#x2F;hadoopdir</li><li>hadoop fs -put localfile hdfs:&#x2F;&#x2F;host:port&#x2F;hadoop&#x2F;hadoopfile</li><li>hadoop fs -put - hdfs:&#x2F;&#x2F;host:port&#x2F;hadoop&#x2F;hadoopfile<br>从标准输入中读取输入。<br>返回值：成功返回0，失败返回-1。</li></ul><h6 id="rm"><a href="#rm" class="headerlink" title="rm"></a><a href="#rm" title="rm"></a>rm</h6><p>使用方法：hadoop fs -rm URI [URI …]<br>删除指定的文件。只删除非空目录和文件。请参考rmr命令了解递归删除。<br>示例：</p><ul><li>hadoop fs -rm hdfs:&#x2F;&#x2F;host:port&#x2F;file &#x2F;user&#x2F;hadoop&#x2F;emptydir<br>返回值：成功返回0，失败返回-1。</li></ul><h6 id="rmr"><a href="#rmr" class="headerlink" title="rmr"></a><a href="#rmr" title="rmr"></a>rmr</h6><p>使用方法：hadoop fs -rmr URI [URI …]<br>delete的递归版本。<br>示例：</p><ul><li>hadoop fs -rmr &#x2F;user&#x2F;hadoop&#x2F;dir</li><li>hadoop fs -rmr hdfs:&#x2F;&#x2F;host:port&#x2F;user&#x2F;hadoop&#x2F;dir<br>返回值：成功返回0，失败返回-1。</li></ul><h6 id="setrep"><a href="#setrep" class="headerlink" title="setrep"></a><a href="#setrep" title="setrep"></a>setrep</h6><p>使用方法：hadoop fs -setrep [-R]<br>改变一个文件的副本系数。-R选项用于递归改变目录下所有文件的副本系数。<br>示例：</p><ul><li>hadoop fs -setrep -w 3 -R &#x2F;user&#x2F;hadoop&#x2F;dir1<br>返回值：成功返回0，失败返回-1。</li></ul><h6 id="stat"><a href="#stat" class="headerlink" title="stat"></a><a href="#stat" title="stat"></a>stat</h6><p>使用方法：hadoop fs -stat URI [URI …]<br>返回指定路径的统计信息。<br>示例：</p><ul><li>hadoop fs -stat path<br>返回值：成功返回0，失败返回-1。</li></ul><h6 id="tail"><a href="#tail" class="headerlink" title="tail"></a><a href="#tail" title="tail"></a>tail</h6><p>使用方法：hadoop fs -tail [-f] URI<br>将文件尾部1K字节的内容输出到stdout。支持-f选项，行为和Unix中一致。<br>示例：</p><ul><li>hadoop fs -tail pathname<br>返回值：成功返回0，失败返回-1。</li></ul><h6 id="test"><a href="#test" class="headerlink" title="test"></a><a href="#test" title="test"></a>test</h6><p>使用方法：hadoop fs -test -[ezd] URI<br>选项：<br>    -e 检查文件是否存在。如果存在则返回0。<br>    -z 检查文件是否是0字节。如果是则返回0。<br>    -d 如果路径是个目录，则返回1，否则返回0。<br>示例：</p><ul><li>hadoop fs -test -e filename</li></ul><h6 id="text"><a href="#text" class="headerlink" title="text"></a><a href="#text" title="text"></a>text</h6><p>使用方法：hadoop fs -text<br>将源文件输出为文本格式。允许的格式是zip和TextRecordInputStream。</p><h6 id="touchz"><a href="#touchz" class="headerlink" title="touchz"></a><a href="#touchz" title="touchz"></a>touchz</h6><p>使用方法：hadoop fs -touchz URI [URI …]<br>创建一个0字节的空文件。<br>示例：</p><ul><li>hadoop fs -touchz pathname<br>返回值：成功返回0，失败返回-1。</li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>大数据</tag>
      
      <tag>Hadoop</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>「SQLServer」灵活的DBContext生命周期管理</title>
    <link href="/2023/07/27/%E3%80%8CSQLServer%E3%80%8D%E7%81%B5%E6%B4%BB%E7%9A%84DBContext%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E7%AE%A1%E7%90%86/"/>
    <url>/2023/07/27/%E3%80%8CSQLServer%E3%80%8D%E7%81%B5%E6%B4%BB%E7%9A%84DBContext%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E7%AE%A1%E7%90%86/</url>
    
    <content type="html"><![CDATA[<p>我们在开发过程中总是回遇到的许多架构上的问题，在这些架构问题中，最常见的是 DbContext 生命周期的管理以及跨域调用时遇到的 request 上下文限制的问题。  </p><p> <br>首先说说 DBContext的Scope 定义问题。根据微软的建议， DBContext是一个轻量级的，类似于 Unit of work模式的实体上下文，其生命周期对应一次业务操作，比如一次 REST API 调用，一次线程中的批处理业务等等，但总的原则是其生命周期应该尽可能短，另外 DBContext的生命周期也隐含地对应一次数据库事务。<br> <br>DBContext生命周期定义有许多的方式，如在一个 DAO函数中创建 DBContext，并在离开函数前销毁的模式，或者在HTTP request开头创建，在 HTTP request结尾销毁的模式，这些模式各有利弊，在一个 DAO函数中创建 DBContext这中模式较好地避免了死锁的发生，但是频繁且碎片化的生命周期导致事务完全失效且对性能有一定的影响，HTTP request的方式灵活性较差，一旦脱离 web上下文，就难以找到更合适的粒度，并且完全依赖运行环境上下文的模式为业务的在不同环境下的复用带来了较大的限制。 这个DBContext的模式有一个共同的问题，就是 DBContext生命周期的定义是不可变的，不能根据业务的需要进行覆盖和重新定义 ，这也是导致我们目前开发中遇到各种问题和障碍的主要原因。<br> <br>DBContext以及其对应的生命周期归根到底是一种资源（类似于 Session），既然是资源，就应该被灵活使用， 在不同的运行环境中拥有不同的行为，而在我们开发 Service和业务逻辑时，并不能完全确定资源的使用方式，我们可以定义 DBContext在当前业务下的生命周期，但是当局部的业务逻辑被放到更大或者完全不同的业务层面中时，作为资源（ Session）是需要被重新定义以适应新的业务上下文的。所以，我们需要一种可以在任何粒度下使用，并可以按需覆盖的 DBContext生命周期管理架构，以便我们在任何业务上下文中都能灵活控制事务和生命周期。<br> <br>针对这个需求，目前已经有不少成熟的思路和解决方案，比较好的是DbContextScope模式和其对应的开源代码，可以参考其在 GitHub上的工程：<a href="https://github.com/mehdime/DbContextScope">https://github.com/mehdime/DbContextScope</a><br> <br>DbContextScope使用.Net 的CallContext机制（<a href="http://www.cnblogs.com/vwxyzh/archive/2009/02/21/1395416.html">http://www.cnblogs.com/vwxyzh/archive/2009/02/21/1395416.html</a> ）来实现同一调用上下文中资源的共享，其典型的调用方式如下面的截图所示：<br><img src="/2023/07/27/%E3%80%8CSQLServer%E3%80%8D%E7%81%B5%E6%B4%BB%E7%9A%84DBContext%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E7%AE%A1%E7%90%86/282A72E2-72B7-4CA1-891C-4F403D54C9E9.png"><br>使用中在 Service层中每个可能被单独调用的方法中显示声明 DBContextScope，当同一AppDomain 中如果有嵌套调用，最外部的 scope会保证所有内部的scope都使用同一个 DBContext，保证了事务和生命周期能被灵活的管理，大家还可以根据不同的业务来选择最合适的 scope，但是即使大家没有精力考虑生命周期的合理定义，也只需要简单的在所有函数中都加上 DBContextScope，就能保证适应绝大多数的调用场景。使用这种模式后，大家也不再需要依赖 HTTP Request或者将Service 声明为多实例，为开发提供更多的灵活性。<br> <br>另外针对跨域调用的限制， CallContext也是解决该问题的合理方案， Plugin Framework随后会提供一套统一的框架共大家在跨域调用时将必要的资源上下文通过 CallContext跨域传递给被调用方，包括在 Web Controller中对跨同一AppDomain 的service多次调用的 DBContext的生命周期进行统一管理，以及提供方法让大家将 HTTP Context中的必要信息传递给跨域的 Service层。</p>]]></content>
    
    
    
    <tags>
      
      <tag>SQLServer</tag>
      
      <tag>C#</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
